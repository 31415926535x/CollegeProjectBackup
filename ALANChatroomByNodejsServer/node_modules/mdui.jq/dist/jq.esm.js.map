{"version":3,"file":"jq.esm.js","sources":["../src/utils.ts","../src/functions/each.ts","../src/JQ.ts","../src/$.ts","../src/methods/each.ts","../src/functions/contains.ts","../src/functions/merge.ts","../src/methods/get.ts","../src/methods/find.ts","../src/methods/utils/event.ts","../src/methods/trigger.ts","../src/functions/extend.ts","../src/functions/param.ts","../src/functions/utils/ajax.ts","../src/functions/ajax.ts","../src/static/ajax.ts","../src/functions/ajaxSetup.ts","../src/static/ajaxSetup.ts","../src/static/contains.ts","../src/functions/utils/data.ts","../src/functions/data.ts","../src/static/data.ts","../src/static/each.ts","../src/static/extend.ts","../src/functions/map.ts","../src/static/map.ts","../src/static/merge.ts","../src/static/param.ts","../src/functions/removeData.ts","../src/static/removeData.ts","../src/functions/unique.ts","../src/static/unique.ts","../src/methods/add.ts","../src/methods/addClass.ts","../src/methods/insertBefore.ts","../src/methods/before.ts","../src/methods/off.ts","../src/methods/on.ts","../src/methods/ajaxStart.ts","../src/methods/map.ts","../src/methods/clone.ts","../src/methods/is.ts","../src/methods/remove.ts","../src/methods/append.ts","../src/methods/appendTo.ts","../src/methods/attr.ts","../src/methods/children.ts","../src/methods/slice.ts","../src/methods/eq.ts","../src/methods/utils/dir.ts","../src/methods/parent.ts","../src/methods/closest.ts","../src/methods/data.ts","../src/methods/empty.ts","../src/methods/extend.ts","../src/methods/filter.ts","../src/methods/first.ts","../src/methods/has.ts","../src/methods/hasClass.ts","../src/methods/width.ts","../src/methods/hide.ts","../src/methods/val.ts","../src/methods/index.ts","../src/methods/last.ts","../src/methods/next.ts","../src/methods/not.ts","../src/methods/offsetParent.ts","../src/methods/position.ts","../src/methods/offset.ts","../src/methods/one.ts","../src/methods/prev.ts","../src/methods/removeAttr.ts","../src/methods/removeData.ts","../src/methods/removeProp.ts","../src/methods/replaceWith.ts","../src/methods/replaceAll.ts","../src/methods/serializeArray.ts","../src/methods/serialize.ts","../src/methods/show.ts","../src/methods/siblings.ts","../src/methods/toggle.ts"],"sourcesContent":["function isNodeName(element: Element, name: string): boolean {\n  return element.nodeName.toLowerCase() === name.toLowerCase();\n}\n\nfunction isFunction(target: any): target is Function {\n  return typeof target === 'function';\n}\n\nfunction isString(target: any): target is string {\n  return typeof target === 'string';\n}\n\nfunction isNumber(target: any): target is number {\n  return typeof target === 'number';\n}\n\nfunction isBoolean(target: any): target is boolean {\n  return typeof target === 'boolean';\n}\n\nfunction isUndefined(target: any): target is undefined {\n  return typeof target === 'undefined';\n}\n\nfunction isNull(target: any): target is null {\n  return target === null;\n}\n\nfunction isWindow(target: any): target is Window {\n  return target instanceof Window;\n}\n\nfunction isDocument(target: any): target is Document {\n  return target instanceof Document;\n}\n\nfunction isElement(target: any): target is Element {\n  return target instanceof Element;\n}\n\nfunction isNode(target: any): target is Node {\n  return target instanceof Node;\n}\n\n/**\n * 是否是 IE 浏览器\n */\nfunction isIE(): boolean {\n  // @ts-ignore\n  return !!window.document.documentMode;\n}\n\nfunction isArrayLike(target: any): target is ArrayLike<any> {\n  if (isFunction(target) || isWindow(target)) {\n    return false;\n  }\n\n  return isNumber(target.length);\n}\n\nfunction isObjectLike(target: any): target is Record<string, any> {\n  return typeof target === 'object' && target !== null;\n}\n\nfunction toElement(target: Element | Document): Element {\n  return isDocument(target) ? target.documentElement : target;\n}\n\n/**\n * 把用 - 分隔的字符串转为驼峰（如 box-sizing 转换为 boxSizing）\n * @param string\n */\nfunction toCamelCase(string: string): string {\n  return string\n    .replace(/^-ms-/, 'ms-')\n    .replace(/-([a-z])/g, (_, letter: string) => letter.toUpperCase());\n}\n\n/**\n * 把驼峰法转为用 - 分隔的字符串（如 boxSizing 转换为 box-sizing）\n * @param string\n */\nfunction toKebabCase(string: string): string {\n  return string.replace(/[A-Z]/g, (replacer) => '-' + replacer.toLowerCase());\n}\n\n/**\n * 获取元素的样式值\n * @param element\n * @param name\n */\nfunction getComputedStyleValue(element: HTMLElement, name: string): string {\n  return window.getComputedStyle(element).getPropertyValue(toKebabCase(name));\n}\n\n/**\n * 检查元素的 box-sizing 是否是 border-box\n * @param element\n */\nfunction isBorderBox(element: HTMLElement): boolean {\n  return getComputedStyleValue(element, 'box-sizing') === 'border-box';\n}\n\n/**\n * 获取元素的 padding, border, margin 宽度（两侧宽度的和，单位为px）\n * @param element\n * @param direction\n * @param extra\n */\nfunction getExtraWidth(\n  element: HTMLElement,\n  direction: 'width' | 'height',\n  extra: 'padding' | 'border' | 'margin',\n): number {\n  const position =\n    direction === 'width' ? ['Left', 'Right'] : ['Top', 'Bottom'];\n\n  return [0, 1].reduce((prev, _, index) => {\n    let prop = extra + position[index];\n\n    if (extra === 'border') {\n      prop += 'Width';\n    }\n\n    return prev + parseFloat(getComputedStyleValue(element, prop) || '0');\n  }, 0);\n}\n\n/**\n * 获取元素的样式值，对 width 和 height 进行过处理\n * @param element\n * @param name\n */\nfunction getStyle(element: HTMLElement, name: string): string {\n  // width、height 属性使用 getComputedStyle 得到的值不准确，需要使用 getBoundingClientRect 获取\n  if (name === 'width' || name === 'height') {\n    const valueNumber = element.getBoundingClientRect()[name];\n\n    if (isBorderBox(element)) {\n      return `${valueNumber}px`;\n    }\n\n    return `${\n      valueNumber -\n      getExtraWidth(element, name, 'border') -\n      getExtraWidth(element, name, 'padding')\n    }px`;\n  }\n\n  return getComputedStyleValue(element, name);\n}\n\n/**\n * 获取子节点组成的数组\n * @param target\n * @param parent\n */\nfunction getChildNodesArray(target: string, parent: string): Array<Node> {\n  const tempParent = document.createElement(parent);\n  tempParent.innerHTML = target;\n\n  return [].slice.call(tempParent.childNodes);\n}\n\n/**\n * 始终返回 false 的函数\n */\nfunction returnFalse(): boolean {\n  return false;\n}\n\n/**\n * 数值单位的 CSS 属性\n */\nconst cssNumber = [\n  'animationIterationCount',\n  'columnCount',\n  'fillOpacity',\n  'flexGrow',\n  'flexShrink',\n  'fontWeight',\n  'gridArea',\n  'gridColumn',\n  'gridColumnEnd',\n  'gridColumnStart',\n  'gridRow',\n  'gridRowEnd',\n  'gridRowStart',\n  'lineHeight',\n  'opacity',\n  'order',\n  'orphans',\n  'widows',\n  'zIndex',\n  'zoom',\n];\n\nexport {\n  isNodeName,\n  isArrayLike,\n  isObjectLike,\n  isFunction,\n  isString,\n  isNumber,\n  isBoolean,\n  isUndefined,\n  isNull,\n  isWindow,\n  isDocument,\n  isElement,\n  isNode,\n  isIE,\n  toElement,\n  toCamelCase,\n  toKebabCase,\n  getComputedStyleValue,\n  isBorderBox,\n  getExtraWidth,\n  getStyle,\n  getChildNodesArray,\n  returnFalse,\n  cssNumber,\n};\n","import PlainObject from '../interfaces/PlainObject';\nimport { isArrayLike } from '../utils';\n\n/**\n * 遍历数组，原样返回第一个参数\n *\n * @param array 需要遍历的数组\n * @param callback 为数组中每个元素执行的回调函数\n *\n * 函数的第一个参数为数组的索引，第二个参数为对应的索引的值，`this` 也指向该值\n *\n * 函数返回 `false` 时，停止遍历\n * @example\n```js\neach( [ \"a\", \"b\", \"c\" ], function( index, value ){\n  alert( \"Index #\" + index + \": \" + value );\n});\n```\n */\nfunction each<T>(\n  array: ArrayLike<T>,\n  callback: (this: T, index: number, value: T) => any | void,\n): ArrayLike<T>;\n\n/**\n * 遍历对象，原样返回第一个参数\n *\n * @param obj 需要遍历的对象\n * @param callback 为对象中每个元素执行的回调函数\n *\n * 函数的第一个参数为对象的键名，第二个参数为对应的键值，`this` 也指向该值\n *\n * 函数返回 `false` 时，停止遍历\n * @example\n```js\neach({ name: \"John\", lang: \"JS\" }, function( key, value ) {\n  alert( \"Key: \" + key + \", Value: \" + value );\n});\n```\n */\nfunction each<T extends PlainObject, K extends keyof T>(\n  obj: T,\n  callback: (this: T[K], key: K, value: T[K]) => any | void,\n): T;\n\nfunction each(target: ArrayLike<any> | PlainObject, callback: Function): any {\n  if (isArrayLike(target)) {\n    for (let i = 0; i < target.length; i += 1) {\n      if (callback.call(target[i], i, target[i]) === false) {\n        return target;\n      }\n    }\n  } else {\n    const keys = Object.keys(target);\n    for (let i = 0; i < keys.length; i += 1) {\n      if (callback.call(target[keys[i]], keys[i], target[keys[i]]) === false) {\n        return target;\n      }\n    }\n  }\n\n  return target;\n}\n\nexport default each;\n","import each from './functions/each';\n\n/**\n * 为了使用模块扩充，这里不能使用默认导出\n */\nexport class JQ<T = HTMLElement> implements ArrayLike<T> {\n  length = 0;\n  [index: number]: T;\n\n  constructor(arr?: ArrayLike<T>) {\n    if (!arr) {\n      return this;\n    }\n\n    each(arr, (i, item) => {\n      // @ts-ignore\n      this[i] = item;\n    });\n\n    this.length = arr.length;\n\n    return this;\n  }\n}\n","import each from './functions/each';\nimport { JQStatic } from './interfaces/JQStatic';\nimport PlainObject from './interfaces/PlainObject';\nimport { JQ } from './JQ';\nimport TypeOrArray from './types/TypeOrArray';\nimport {\n  getChildNodesArray,\n  isArrayLike,\n  isFunction,\n  isNode,\n  isString,\n} from './utils';\n\nfunction get$(): JQStatic {\n  const $ = function (\n    selector?:\n      | string\n      | TypeOrArray<Element>\n      | null\n      | JQ\n      | PlainObject\n      | Function,\n  ) {\n    if (!selector) {\n      return new JQ();\n    }\n\n    // JQ\n    if (selector instanceof JQ) {\n      return selector;\n    }\n\n    // function\n    if (isFunction(selector)) {\n      if (\n        /complete|loaded|interactive/.test(document.readyState) &&\n        document.body\n      ) {\n        selector.call(document, $);\n      } else {\n        document.addEventListener(\n          'DOMContentLoaded',\n          () => selector.call(document, $),\n          false,\n        );\n      }\n\n      return new JQ([document]);\n    }\n\n    // String\n    if (isString(selector)) {\n      const html = selector.trim();\n\n      // 根据 HTML 字符串创建 JQ 对象\n      if (html[0] === '<' && html[html.length - 1] === '>') {\n        let toCreate = 'div';\n\n        const tags = {\n          li: 'ul',\n          tr: 'tbody',\n          td: 'tr',\n          th: 'tr',\n          tbody: 'table',\n          option: 'select',\n        };\n\n        each(tags, (childTag, parentTag) => {\n          if (html.indexOf(`<${childTag}`) === 0) {\n            toCreate = parentTag;\n            return false;\n          }\n\n          return;\n        });\n\n        return new JQ(getChildNodesArray(html, toCreate));\n      }\n\n      // 根据 CSS 选择器创建 JQ 对象\n      const isIdSelector = selector[0] === '#' && !selector.match(/[ .<>:~]/);\n\n      if (!isIdSelector) {\n        return new JQ(document.querySelectorAll(selector));\n      }\n\n      const element = document.getElementById(selector.slice(1));\n      if (element) {\n        return new JQ([element]);\n      }\n\n      return new JQ();\n    }\n\n    if (isArrayLike(selector) && !isNode(selector)) {\n      return new JQ(selector);\n    }\n\n    return new JQ([selector]);\n  } as JQStatic;\n\n  $.fn = JQ.prototype;\n\n  return $;\n}\n\nconst $ = get$();\n\nexport default $;\n","import $ from '../$';\nimport each from '../functions/each';\nimport { JQ } from '../JQ';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 遍历 JQ 对象，为每个元素执行一个函数\n     * @param callback\n     * 执行的回调函数\n     *\n     * 函数的第一个参数为元素的索引位置，第二个参数为当前元素，`this` 指向当前元素\n     *\n     * 如果函数返回 `false`，则结束遍历。\n     * @example\n```js\n$('img').each(function (index, element) {\n  this.src = 'test' + index + '.jpg';\n});\n```\n     */\n    each(callback: (this: T, index: number, element: T) => void | any): this;\n  }\n}\n\n$.fn.each = function (this: JQ, callback: void | any): JQ {\n  return each(this, callback) as JQ;\n};\n","import { toElement } from '../utils';\n\n/**\n * 检查 container 元素内是否包含 contains 元素\n * @param container 父元素\n * @param contains 子元素\n * @example\n```js\ncontains( document, document.body ); // true\ncontains( document.getElementById('test'), document ); // false\ncontains( $('.container').get(0), $('.contains').get(0) ); // false\n```\n */\nfunction contains(\n  container: Element | Document,\n  contains: Element | Document,\n): boolean {\n  return container !== contains && toElement(container).contains(contains);\n}\n\nexport default contains;\n","import each from './each';\n\n/**\n * 把第二个数组的元素追加到第一个数组中，并返回合并后的数组\n * @param first 第一个数组\n * @param second 该数组的元素将被追加到第一个数组中\n * @example\n```js\nmerge( [ 0, 1, 2 ], [ 2, 3, 4 ] )\n// [ 0, 1, 2, 2, 3, 4 ]\n```\n */\nfunction merge<T, U>(first: T[], second: U[]): Array<T | U> {\n  each(second, (_, value) => {\n    first.push(value as any);\n  });\n\n  return first;\n}\n\nexport default merge;\n","import $ from '../$';\nimport { JQ } from '../JQ';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 获取集合中指定索引位置的元素\n     * @param index 索引位置\n     * @example\n```js\n// 获取第 3 个 p 元素\n$('p').get(2)\n```\n     * @example\n```js\n// 获取最后一个 p 元素\n$('p').get(-1)\n```\n     */\n    get(index: number): T;\n\n    /**\n     * 获取集合中所有元素组成的数组\n     * @example\n```js\n// 获取所有 p 元素组成的数组\n$('p').get()\n```\n     */\n    get(): T[];\n  }\n}\n\n$.fn.get = function (this: JQ, index?: number): any | any[] {\n  return index === undefined\n    ? [].slice.call(this)\n    : this[index >= 0 ? index : index + this.length];\n};\n","import $ from '../$';\nimport merge from '../functions/merge';\nimport { JQ } from '../JQ';\nimport Selector from '../types/Selector';\nimport './each';\nimport './get';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 根据 CSS 选择器找到指定的后代节点的集合\n     * @param selector CSS 选择器\n     * @example\n```js\n$('#box').find('.box')\n```\n     */\n    find(selector: Selector): this;\n  }\n}\n\n$.fn.find = function (this: JQ, selector: Selector): JQ {\n  const foundElements: HTMLElement[] = [];\n\n  this.each((_, element) => {\n    merge(foundElements, $(element.querySelectorAll(selector)).get());\n  });\n\n  return new JQ(foundElements);\n};\n","import $ from '../../$';\nimport contains from '../../functions/contains';\nimport { isObjectLike } from '../../utils';\nimport '../find';\n\ntype EventCallback = (\n  this: Element | Document | Window,\n  event: Event,\n  data?: any,\n  ...dataN: any[]\n) => void | false;\n\ntype Handler = {\n  type: string; // 事件名\n  ns: string; // 命名空间\n  func: Function; // 事件处理函数\n  id: number; // 事件ID\n  proxy: any;\n  selector?: string; // 选择器\n};\n\ntype Handlers = {\n  // 元素ID\n  [elementIndex: number]: Handler[];\n};\n\n// 存储事件\nconst handlers: Handlers = {};\n\n// 元素ID\nlet mduiElementId = 1;\n\n/**\n * 为元素赋予一个唯一的ID\n */\nfunction getElementId(element: Element | Document | Window | Function): number {\n  const key = '_mduiEventId';\n\n  // @ts-ignore\n  if (!element[key]) {\n    // @ts-ignore\n    element[key] = ++mduiElementId;\n  }\n\n  // @ts-ignore\n  return element[key];\n}\n\n/**\n * 解析事件名中的命名空间\n */\nfunction parse(type: string): { type: string; ns: string } {\n  const parts = type.split('.');\n\n  return {\n    type: parts[0],\n    ns: parts.slice(1).sort().join(' '),\n  };\n}\n\n/**\n * 命名空间匹配规则\n */\nfunction matcherFor(ns: string): RegExp {\n  return new RegExp('(?:^| )' + ns.replace(' ', ' .* ?') + '(?: |$)');\n}\n\n/**\n * 获取匹配的事件\n * @param element\n * @param type\n * @param func\n * @param selector\n */\nfunction getHandlers(\n  element: Element | Document | Window,\n  type: string,\n  func?: Function,\n  selector?: string,\n): Handler[] {\n  const event = parse(type);\n\n  return (handlers[getElementId(element)] || []).filter(\n    (handler) =>\n      handler &&\n      (!event.type || handler.type === event.type) &&\n      (!event.ns || matcherFor(event.ns).test(handler.ns)) &&\n      (!func || getElementId(handler.func) === getElementId(func)) &&\n      (!selector || handler.selector === selector),\n  );\n}\n\n/**\n * 添加事件监听\n * @param element\n * @param types\n * @param func\n * @param data\n * @param selector\n */\nfunction add(\n  element: Element | Document | Window,\n  types: string,\n  func: Function,\n  data?: any,\n  selector?: string,\n): void {\n  const elementId = getElementId(element);\n\n  if (!handlers[elementId]) {\n    handlers[elementId] = [];\n  }\n\n  // 传入 data.useCapture 来设置 useCapture: true\n  let useCapture = false;\n  if (isObjectLike(data) && data.useCapture) {\n    useCapture = true;\n  }\n\n  types.split(' ').forEach((type) => {\n    if (!type) {\n      return;\n    }\n\n    const event = parse(type);\n\n    function callFn(e: Event, elem: Element | Document | Window): void {\n      // 因为鼠标事件模拟事件的 detail 属性是只读的，因此在 e._detail 中存储参数\n      const result = func.apply(\n        elem,\n        // @ts-ignore\n        e._detail === undefined ? [e] : [e].concat(e._detail),\n      );\n\n      if (result === false) {\n        e.preventDefault();\n        e.stopPropagation();\n      }\n    }\n\n    function proxyFn(e: Event): void {\n      // @ts-ignore\n      if (e._ns && !matcherFor(e._ns).test(event.ns)) {\n        return;\n      }\n\n      // @ts-ignore\n      e._data = data;\n\n      if (selector) {\n        // 事件代理\n        $(element)\n          .find(selector)\n          .get()\n          .reverse()\n          .forEach((elem) => {\n            if (\n              elem === e.target ||\n              contains(elem as HTMLElement, e.target as HTMLElement)\n            ) {\n              callFn(e, elem);\n            }\n          });\n      } else {\n        // 不使用事件代理\n        callFn(e, element);\n      }\n    }\n\n    const handler: Handler = {\n      type: event.type,\n      ns: event.ns,\n      func,\n      selector,\n      id: handlers[elementId].length,\n      proxy: proxyFn,\n    };\n\n    handlers[elementId].push(handler);\n\n    element.addEventListener(handler.type, proxyFn, useCapture);\n  });\n}\n\n/**\n * 移除事件监听\n * @param element\n * @param types\n * @param func\n * @param selector\n */\nfunction remove(\n  element: Element | Document | Window,\n  types?: string,\n  func?: Function,\n  selector?: string,\n): void {\n  const handlersInElement = handlers[getElementId(element)] || [];\n  const removeEvent = (handler: Handler): void => {\n    delete handlersInElement[handler.id];\n    element.removeEventListener(handler.type, handler.proxy, false);\n  };\n\n  if (!types) {\n    handlersInElement.forEach((handler) => removeEvent(handler));\n  } else {\n    types.split(' ').forEach((type) => {\n      if (type) {\n        getHandlers(element, type, func, selector).forEach((handler) =>\n          removeEvent(handler),\n        );\n      }\n    });\n  }\n}\n\nexport { EventCallback, parse, add, remove };\n","import $ from '../$';\nimport PlainObject from '../interfaces/PlainObject';\nimport { JQ } from '../JQ';\nimport './each';\nimport { parse } from './utils/event';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 触发指定的事件\n     * @param type 事件名\n     * @param extraParameters 传给事件处理函数的额外参数\n     * @example ````触发 .box 元素上的 click 事件\n```js\n$('.box').trigger('click');\n```\n     * @example ````触发 .box 元素上的 click 事件，并给事件处理函数传入额外参数\n```js\n$('.box').trigger('click', {key1: 'value1', key2: 'value2'});\n```\n     */\n    trigger(\n      type: string,\n      extraParameters?: any[] | PlainObject | string | number | boolean,\n    ): this;\n  }\n}\n\n$.fn.trigger = function (this: JQ, type: string, extraParameters: any): JQ {\n  type EventParams = {\n    detail?: any;\n    bubbles: boolean;\n    cancelable: boolean;\n  };\n\n  const event = parse(type);\n  let eventObject: MouseEvent | CustomEvent;\n  const eventParams: EventParams = {\n    bubbles: true,\n    cancelable: true,\n  };\n  const isMouseEvent =\n    ['click', 'mousedown', 'mouseup', 'mousemove'].indexOf(event.type) > -1;\n\n  if (isMouseEvent) {\n    // Note: MouseEvent 无法传入 detail 参数\n    eventObject = new MouseEvent(event.type, eventParams);\n  } else {\n    eventParams.detail = extraParameters;\n    eventObject = new CustomEvent(event.type, eventParams);\n  }\n\n  // @ts-ignore\n  eventObject._detail = extraParameters;\n\n  // @ts-ignore\n  eventObject._ns = event.ns;\n\n  return this.each(function () {\n    this.dispatchEvent(eventObject);\n  });\n};\n","import each from '../functions/each';\nimport PlainObject from '../interfaces/PlainObject';\nimport { isUndefined } from '../utils';\n\n/**\n * 将所有对象的属性都添加到第一个对象，并返回合并后的对象。\n * @param target 其他参数的属性将合并到该参数\n * @param object1 该对象的属性将合并到第一个参数\n * @param object2 该对象的属性将合并到第一个参数\n * @param object3 该对象的属性将合并到第一个参数\n * @param object4 该对象的属性将合并到第一个参数\n * @param object5 该对象的属性将合并到第一个参数\n * @param object6 该对象的属性将合并到第一个参数\n * @example\n```js\nvar object = extend(\n  { key: value },\n  { key1: value1 },\n  { key2: value2 },\n  { key3: value3 },\n  { key4: value4 },\n  { key5: value5 },\n  { key6: value6 },\n);\n// 此时第一个对象和返回值都是\n{\n  key: value,\n  key1: value1,\n  key2: value2,\n  key3: value3,\n  key4: value4,\n  key5: value5,\n  key6: value6,\n}\n```\n */\nfunction extend<\n  T extends PlainObject,\n  U extends PlainObject,\n  V extends PlainObject,\n  W extends PlainObject,\n  X extends PlainObject,\n  Y extends PlainObject,\n  Z extends PlainObject\n>(\n  target: T,\n  object1: U,\n  object2: V,\n  object3: W,\n  object4: X,\n  object5: Y,\n  object6: Z,\n): T & U & V & W & X & Y & Z;\n\n/**\n * 将所有对象的属性都添加到第一个对象，并返回合并后的对象。\n * @param target 其他参数的属性将合并到该参数\n * @param object1 该对象的属性将合并到第一个参数\n * @param object2 该对象的属性将合并到第一个参数\n * @param object3 该对象的属性将合并到第一个参数\n * @param object4 该对象的属性将合并到第一个参数\n * @param object5 该对象的属性将合并到第一个参数\n * @example\n```js\nvar object = extend(\n  { key: value },\n  { key1: value1 },\n  { key2: value2 },\n  { key3: value3 },\n  { key4: value4 },\n  { key5: value5 },\n);\n// 此时第一个对象和返回值都是\n{\n  key: value,\n  key1: value1,\n  key2: value2,\n  key3: value3,\n  key4: value4,\n  key5: value5,\n}\n```\n */\nfunction extend<\n  T extends PlainObject,\n  U extends PlainObject,\n  V extends PlainObject,\n  W extends PlainObject,\n  X extends PlainObject,\n  Y extends PlainObject\n>(\n  target: T,\n  object1: U,\n  object2: V,\n  object3: W,\n  object4: X,\n  object5: Y,\n): T & U & V & W & X & Y;\n\n/**\n * 将所有对象的属性都添加到第一个对象，并返回合并后的对象。\n * @param target 其他参数的属性将合并到该参数\n * @param object1 该对象的属性将合并到第一个参数\n * @param object2 该对象的属性将合并到第一个参数\n * @param object3 该对象的属性将合并到第一个参数\n * @param object4 该对象的属性将合并到第一个参数\n * @example\n```js\nvar object = extend(\n  { key: value },\n  { key1: value1 },\n  { key2: value2 },\n  { key3: value3 },\n  { key4: value4 },\n);\n// 此时第一个对象和返回值都是\n{\n  key: value,\n  key1: value1,\n  key2: value2,\n  key3: value3,\n  key4: value4,\n}\n```\n */\nfunction extend<\n  T extends PlainObject,\n  U extends PlainObject,\n  V extends PlainObject,\n  W extends PlainObject,\n  X extends PlainObject\n>(target: T, object1: U, object2: V, object3: W, object4: X): T & U & V & W & X;\n\n/**\n * 将所有对象的属性都添加到第一个对象，并返回合并后的对象。\n * @param target 其他参数的属性将合并到该参数\n * @param object1 该对象的属性将合并到第一个参数\n * @param object2 该对象的属性将合并到第一个参数\n * @param object3 该对象的属性将合并到第一个参数\n * @example\n```js\nvar object = extend(\n  { key: value },\n  { key1: value1 },\n  { key2: value2 },\n  { key3: value3 },\n);\n// 此时第一个对象和返回值都是\n{\n  key: value,\n  key1: value1,\n  key2: value2,\n  key3: value3,\n}\n```\n */\nfunction extend<\n  T extends PlainObject,\n  U extends PlainObject,\n  V extends PlainObject,\n  W extends PlainObject\n>(target: T, object1: U, object2: V, object3: W): T & U & V & W;\n\n/**\n * 将所有对象的属性都添加到第一个对象，并返回合并后的对象。\n * @param target 其他参数的属性将合并到该参数\n * @param object1 该对象的属性将合并到第一个参数\n * @param object2 该对象的属性将合并到第一个参数\n * @example\n```js\nvar object = extend(\n  { key: value },\n  { key1: value1 },\n  { key2: value2 },\n);\n// 此时第一个对象和返回值都是\n{\n  key: value,\n  key1: value1,\n  key2: value2,\n}\n```\n */\nfunction extend<\n  T extends PlainObject,\n  U extends PlainObject,\n  V extends PlainObject\n>(target: T, object1: U, object2: V): T & U & V;\n\n/**\n * 将所有对象的属性都添加到第一个对象，并返回合并后的对象。\n * @param target 其他参数的属性将合并到该参数\n * @param object1 该对象的属性将合并到第一个参数\n * @example\n```js\nvar object = extend(\n  { key: value },\n  { key1: value1 },\n);\n// 此时第一个对象和返回值都是\n{\n  key: value,\n  key1: value1,\n}\n```\n */\nfunction extend<T extends PlainObject, U extends PlainObject>(\n  target: T,\n  object1: U,\n): T & U;\n\n/**\n * 将所有对象的属性都添加到第一个对象，并返回合并后的对象。\n * @param target 其他参数的属性将合并到该参数\n * @param object1 该对象的属性将合并到第一个参数\n * @param objectN 额外的对象，这些对象的属性将合并到第一个对象\n * @example\n```js\nvar object = extend(\n  { key: value },\n  { key1: value1 },\n  { key2: value2 },\n);\n// 此时第一个对象和返回值都是\n{\n  key: value,\n  key1: value1,\n  key2: value2,\n}\n```\n */\nfunction extend(\n  target: PlainObject,\n  object1: PlainObject,\n  ...objectN: PlainObject[]\n): PlainObject;\n\nfunction extend(\n  target: PlainObject,\n  object1: PlainObject,\n  ...objectN: PlainObject[]\n): PlainObject {\n  objectN.unshift(object1);\n\n  each(objectN, (_, object) => {\n    each(object, (prop, value) => {\n      if (!isUndefined(value)) {\n        target[prop] = value;\n      }\n    });\n  });\n\n  return target;\n}\n\nexport default extend;\n","import PlainObject from '../interfaces/PlainObject';\nimport { isObjectLike } from '../utils';\nimport each from './each';\n\n/**\n * 将数组或对象序列化，序列化后的字符串可作为 URL 查询字符串使用\n *\n * 若传入数组，则格式必须和 serializeArray 方法的返回值一样\n * @param obj 对象或数组\n * @example\n```js\nparam({ width: 1680, height: 1050 });\n// width=1680&height=1050\n```\n * @example\n```js\nparam({ foo: { one: 1, two: 2 }})\n// foo[one]=1&foo[two]=2\n```\n * @example\n```js\nparam({ids: [1, 2, 3]})\n// ids[]=1&ids[]=2&ids[]=3\n```\n * @example\n```js\nparam([\n  {\"name\":\"name\",\"value\":\"mdui\"},\n  {\"name\":\"password\",\"value\":\"123456\"}\n])\n// name=mdui&password=123456\n```\n */\nfunction param(obj: any[] | PlainObject): string {\n  if (!isObjectLike(obj) && !Array.isArray(obj)) {\n    return '';\n  }\n\n  const args: any[] = [];\n\n  function destructure(key: any, value: any): void {\n    let keyTmp;\n\n    if (isObjectLike(value)) {\n      each(value, (i, v) => {\n        if (Array.isArray(value) && !isObjectLike(v)) {\n          keyTmp = '';\n        } else {\n          keyTmp = i;\n        }\n\n        destructure(`${key}[${keyTmp}]`, v);\n      });\n    } else {\n      if (value == null || value === '') {\n        keyTmp = '=';\n      } else {\n        keyTmp = `=${encodeURIComponent(value)}`;\n      }\n\n      args.push(encodeURIComponent(key) + keyTmp);\n    }\n  }\n\n  if (Array.isArray(obj)) {\n    each(obj, function () {\n      destructure(this.name, this.value);\n    });\n  } else {\n    each(obj, destructure);\n  }\n\n  return args.join('&');\n}\n\nexport default param;\n","import AjaxOptions from '../../interfaces/AjaxOptions';\nimport { EventName } from '../../types/JQAjax';\n\ntype AjaxEventsInterface = { [name: string]: EventName };\n\n// 全局配置参数\nconst globalOptions: AjaxOptions = {};\n\n// 全局事件名\nconst ajaxEvents: AjaxEventsInterface = {\n  ajaxStart: 'start.mdui.ajax',\n  ajaxSuccess: 'success.mdui.ajax',\n  ajaxError: 'error.mdui.ajax',\n  ajaxComplete: 'complete.mdui.ajax',\n};\n\nexport { globalOptions, ajaxEvents };\n","import $ from '../$';\nimport AjaxOptions from '../interfaces/AjaxOptions';\nimport '../methods/trigger';\nimport {\n  CallbackName,\n  ErrorCallback,\n  ErrorTextStatus,\n  EventName,\n  StatusCodeCallbacks,\n  SuccessCallback,\n  SuccessTextStatus,\n  TextStatus,\n} from '../types/JQAjax';\nimport { isString, isUndefined } from '../utils';\nimport each from './each';\nimport extend from './extend';\nimport param from './param';\nimport { ajaxEvents, globalOptions } from './utils/ajax';\n\ninterface EventParams {\n  data?: string;\n  xhr?: XMLHttpRequest;\n  options?: AjaxOptions;\n}\n\n/**\n * 判断此请求方法是否通过查询字符串提交参数\n * @param method 请求方法，大写\n */\nfunction isQueryStringData(method: string): boolean {\n  return ['GET', 'HEAD'].indexOf(method) >= 0;\n}\n\n/**\n * 添加参数到 URL 上，且 URL 中不存在 ? 时，自动把第一个 & 替换为 ?\n * @param url\n * @param query\n */\nfunction appendQuery(url: string, query: string): string {\n  return `${url}&${query}`.replace(/[&?]{1,2}/, '?');\n}\n\n/**\n * 合并请求参数，参数优先级：options > globalOptions > defaults\n * @param options\n */\nfunction mergeOptions(options: AjaxOptions): AjaxOptions {\n  // 默认参数\n  const defaults: AjaxOptions = {\n    url: '',\n    method: 'GET',\n    data: '',\n    processData: true,\n    async: true,\n    cache: true,\n    username: '',\n    password: '',\n    headers: {},\n    xhrFields: {},\n    statusCode: {},\n    dataType: 'text',\n    contentType: 'application/x-www-form-urlencoded',\n    timeout: 0,\n    global: true,\n  };\n\n  // globalOptions 中的回调函数不合并\n  each(globalOptions, (key, value) => {\n    const callbacks: (CallbackName | 'statusCode')[] = [\n      'beforeSend',\n      'success',\n      'error',\n      'complete',\n      'statusCode',\n    ];\n\n    // @ts-ignore\n    if (callbacks.indexOf(key) < 0 && !isUndefined(value)) {\n      defaults[key] = value;\n    }\n  });\n\n  return extend({}, defaults, options);\n}\n\n/**\n * 发送 ajax 请求\n * @param options\n * @example\n```js\najax({\n  method: \"POST\",\n  url: \"some.php\",\n  data: { name: \"John\", location: \"Boston\" }\n}).then(function( msg ) {\n  alert( \"Data Saved: \" + msg );\n});\n```\n */\nfunction ajax(options: AjaxOptions): Promise<any> {\n  // 是否已取消请求\n  let isCanceled = false;\n\n  // 事件参数\n  const eventParams: EventParams = {};\n\n  // 参数合并\n  const mergedOptions = mergeOptions(options);\n\n  let url = mergedOptions.url! || window.location.toString();\n  const method = mergedOptions.method!.toUpperCase();\n  let data = mergedOptions.data!;\n  const processData = mergedOptions.processData!;\n  const async = mergedOptions.async!;\n  const cache = mergedOptions.cache!;\n  const username = mergedOptions.username!;\n  const password = mergedOptions.password!;\n  const headers = mergedOptions.headers!;\n  const xhrFields = mergedOptions.xhrFields!;\n  const statusCode = mergedOptions.statusCode!;\n  const dataType = mergedOptions.dataType!;\n  const contentType = mergedOptions.contentType!;\n  const timeout = mergedOptions.timeout!;\n  const global = mergedOptions.global!;\n\n  // 需要发送的数据\n  // GET/HEAD 请求和 processData 为 true 时，转换为查询字符串格式，特殊格式不转换\n  if (\n    data &&\n    (isQueryStringData(method) || processData) &&\n    !isString(data) &&\n    !(data instanceof ArrayBuffer) &&\n    !(data instanceof Blob) &&\n    !(data instanceof Document) &&\n    !(data instanceof FormData)\n  ) {\n    data = param(data);\n  }\n\n  // 对于 GET、HEAD 类型的请求，把 data 数据添加到 URL 中\n  if (data && isQueryStringData(method)) {\n    // 查询字符串拼接到 URL 中\n    url = appendQuery(url, data);\n    data = null;\n  }\n\n  /**\n   * 触发事件和回调函数\n   * @param event\n   * @param params\n   * @param callback\n   * @param args\n   */\n  function trigger(\n    event: EventName,\n    params: EventParams,\n    callback: CallbackName,\n    ...args: any[]\n  ): void {\n    // 触发全局事件\n    if (global) {\n      $(document).trigger(event, params);\n    }\n\n    // 触发 ajax 回调和事件\n    let result1;\n    let result2;\n\n    if (callback) {\n      // 全局回调\n      if (callback in globalOptions) {\n        // @ts-ignore\n        result1 = globalOptions[callback](...args);\n      }\n\n      // 自定义回调\n      if (mergedOptions[callback]) {\n        // @ts-ignore\n        result2 = mergedOptions[callback](...args);\n      }\n\n      // beforeSend 回调返回 false 时取消 ajax 请求\n      if (\n        callback === 'beforeSend' &&\n        (result1 === false || result2 === false)\n      ) {\n        isCanceled = true;\n      }\n    }\n  }\n\n  // XMLHttpRequest 请求\n  function XHR(): Promise<any> {\n    let textStatus: TextStatus;\n\n    return new Promise((resolve, reject): void => {\n      // GET/HEAD 请求的缓存处理\n      if (isQueryStringData(method) && !cache) {\n        url = appendQuery(url, `_=${Date.now()}`);\n      }\n\n      // 创建 XHR\n      const xhr = new XMLHttpRequest();\n\n      xhr.open(method, url, async, username, password);\n\n      if (\n        contentType ||\n        (data && !isQueryStringData(method) && contentType !== false)\n      ) {\n        xhr.setRequestHeader('Content-Type', contentType);\n      }\n\n      // 设置 Accept\n      if (dataType === 'json') {\n        xhr.setRequestHeader('Accept', 'application/json, text/javascript');\n      }\n\n      // 添加 headers\n      if (headers) {\n        each(headers, (key: string, value) => {\n          // undefined 值不发送，string 和 null 需要发送\n          if (!isUndefined(value)) {\n            xhr.setRequestHeader(key, value + ''); // 把 null 转换成字符串\n          }\n        });\n      }\n\n      // 检查是否是跨域请求，跨域请求时不添加 X-Requested-With\n      const crossDomain =\n        /^([\\w-]+:)?\\/\\/([^/]+)/.test(url) &&\n        RegExp.$2 !== window.location.host;\n\n      if (!crossDomain) {\n        xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');\n      }\n\n      if (xhrFields) {\n        each(xhrFields, (key, value) => {\n          // @ts-ignore\n          xhr[key] = value;\n        });\n      }\n\n      eventParams.xhr = xhr;\n      eventParams.options = mergedOptions;\n\n      let xhrTimeout: any;\n\n      xhr.onload = function (): void {\n        if (xhrTimeout) {\n          clearTimeout(xhrTimeout);\n        }\n\n        // AJAX 返回的 HTTP 响应码是否表示成功\n        const isHttpStatusSuccess =\n          (xhr.status >= 200 && xhr.status < 300) ||\n          xhr.status === 304 ||\n          xhr.status === 0;\n\n        let responseData: any;\n\n        if (isHttpStatusSuccess) {\n          if (xhr.status === 204 || method === 'HEAD') {\n            textStatus = 'nocontent';\n          } else if (xhr.status === 304) {\n            textStatus = 'notmodified';\n          } else {\n            textStatus = 'success';\n          }\n\n          if (dataType === 'json') {\n            try {\n              responseData =\n                method === 'HEAD' ? undefined : JSON.parse(xhr.responseText);\n              eventParams.data = responseData;\n            } catch (err) {\n              textStatus = 'parsererror';\n\n              trigger(\n                ajaxEvents.ajaxError,\n                eventParams,\n                'error',\n                xhr,\n                textStatus,\n              );\n\n              reject(new Error(textStatus));\n            }\n\n            if (textStatus !== 'parsererror') {\n              trigger(\n                ajaxEvents.ajaxSuccess,\n                eventParams,\n                'success',\n                responseData,\n                textStatus,\n                xhr,\n              );\n\n              resolve(responseData);\n            }\n          } else {\n            responseData =\n              method === 'HEAD'\n                ? undefined\n                : xhr.responseType === 'text' || xhr.responseType === ''\n                ? xhr.responseText\n                : xhr.response;\n            eventParams.data = responseData;\n\n            trigger(\n              ajaxEvents.ajaxSuccess,\n              eventParams,\n              'success',\n              responseData,\n              textStatus,\n              xhr,\n            );\n\n            resolve(responseData);\n          }\n        } else {\n          textStatus = 'error';\n\n          trigger(ajaxEvents.ajaxError, eventParams, 'error', xhr, textStatus);\n\n          reject(new Error(textStatus));\n        }\n\n        // statusCode\n        each(\n          [globalOptions.statusCode!, statusCode],\n          (_, func: StatusCodeCallbacks) => {\n            if (func && func[xhr.status]) {\n              if (isHttpStatusSuccess) {\n                (func[xhr.status] as SuccessCallback)(\n                  responseData,\n                  textStatus as SuccessTextStatus,\n                  xhr,\n                );\n              } else {\n                (func[xhr.status] as ErrorCallback)(\n                  xhr,\n                  textStatus as ErrorTextStatus,\n                );\n              }\n            }\n          },\n        );\n\n        trigger(\n          ajaxEvents.ajaxComplete,\n          eventParams,\n          'complete',\n          xhr,\n          textStatus,\n        );\n      };\n\n      xhr.onerror = function (): void {\n        if (xhrTimeout) {\n          clearTimeout(xhrTimeout);\n        }\n\n        trigger(\n          ajaxEvents.ajaxError,\n          eventParams,\n          'error',\n          xhr,\n          xhr.statusText,\n        );\n        trigger(ajaxEvents.ajaxComplete, eventParams, 'complete', xhr, 'error');\n\n        reject(new Error(xhr.statusText));\n      };\n\n      xhr.onabort = function (): void {\n        let statusText: ErrorTextStatus = 'abort';\n\n        if (xhrTimeout) {\n          statusText = 'timeout';\n          clearTimeout(xhrTimeout);\n        }\n\n        trigger(ajaxEvents.ajaxError, eventParams, 'error', xhr, statusText);\n        trigger(\n          ajaxEvents.ajaxComplete,\n          eventParams,\n          'complete',\n          xhr,\n          statusText,\n        );\n\n        reject(new Error(statusText));\n      };\n\n      // ajax start 回调\n      trigger(ajaxEvents.ajaxStart, eventParams, 'beforeSend', xhr);\n\n      if (isCanceled) {\n        reject(new Error('cancel'));\n\n        return;\n      }\n\n      // Timeout\n      if (timeout > 0) {\n        xhrTimeout = setTimeout(() => {\n          xhr.abort();\n        }, timeout);\n      }\n\n      // 发送 XHR\n      xhr.send(data);\n    });\n  }\n\n  return XHR();\n}\n\nexport default ajax;\n","import $ from '../$';\nimport ajax from '../functions/ajax';\nimport AjaxOptions from '../interfaces/AjaxOptions';\n\ndeclare module '../interfaces/JQStatic' {\n  interface JQStatic {\n    /**\n     * 发送 ajax 请求\n     * @param options\n     * @example\n```js\najax({\n  method: \"POST\",\n  url: \"some.php\",\n  data: { name: \"John\", location: \"Boston\" }\n}).then(function( msg ) {\n  alert( \"Data Saved: \" + msg );\n});\n```\n     */\n    ajax(options: AjaxOptions): Promise<any>;\n  }\n}\n\n$.ajax = ajax;\n","import extend from '../functions/extend';\nimport AjaxOptions from '../interfaces/AjaxOptions';\nimport { globalOptions } from './utils/ajax';\n\n/**\n * 为 Ajax 请求设置全局配置参数\n * @param options 键值对参数\n * @example\n```js\najaxSetup({\n  dataType: 'json',\n  method: 'POST',\n});\n```\n */\nfunction ajaxSetup(options: AjaxOptions): AjaxOptions {\n  return extend(globalOptions, options);\n}\n\nexport default ajaxSetup;\n","import $ from '../$';\nimport ajaxSetup from '../functions/ajaxSetup';\nimport AjaxOptions from '../interfaces/AjaxOptions';\n\ndeclare module '../interfaces/JQStatic' {\n  interface JQStatic {\n    /**\n     * 为 Ajax 请求设置全局配置参数\n     * @param options 键值对参数\n     * @example\n```js\n$.ajaxSetup({\n  dataType: 'json',\n  method: 'POST',\n});\n```\n     */\n    ajaxSetup(options: AjaxOptions): AjaxOptions;\n  }\n}\n\n$.ajaxSetup = ajaxSetup;\n","import $ from '../$';\nimport contains from '../functions/contains';\n\ndeclare module '../interfaces/JQStatic' {\n  interface JQStatic {\n    /**\n     * 检查 container 元素内是否包含 contains 元素\n     * @param container 父元素\n     * @param contains 子元素\n     * @example\n```js\n$.contains( document, document.body ); // true\n$.contains( document.getElementById('test'), document ); // false\n$.contains( $('.container').get(0), $('.contains').get(0) ); // false\n```\n     */\n    contains(\n      container: Element | Document | null,\n      contains: Element | Document | null,\n    ): boolean;\n  }\n}\n\n$.contains = contains;\n","const dataNS = '_mduiElementDataStorage';\n\nexport default dataNS;\n","import PlainObject from '../interfaces/PlainObject';\nimport { isObjectLike, isUndefined, toCamelCase } from '../utils';\nimport each from './each';\nimport dataNS from './utils/data';\n\n/**\n * 在元素上设置键值对数据\n * @param element\n * @param object\n */\nfunction setObjectToElement(\n  element: Element | Document | Window,\n  object: PlainObject,\n): void {\n  // @ts-ignore\n  if (!element[dataNS]) {\n    // @ts-ignore\n    element[dataNS] = {};\n  }\n\n  each(object, (key, value) => {\n    // @ts-ignore\n    element[dataNS][toCamelCase(key)] = value;\n  });\n}\n\n/**\n * `value` 为 `undefined` 时，相当于 `data(element, key)`，即获取指定元素上存储的数据\n *\n * Note: 该方法不检索 `data-*` 属性\n *\n * @param element 用于存储数据的元素\n * @param key 数据键名\n * @param value `undefined`\n * @example\n```js\ndata(document.body, 'type', undefined)\n```\n */\nfunction data(\n  element: Element | Document | Window,\n  key: string,\n  value: undefined,\n): any;\n\n/**\n * 在指定元素上存储数据，返回存储的值。\n * @param element 用于存储数据的元素\n * @param key 数据键名\n * @param value 数据值\n * @example\n```js\ndata(document.body, 'type', 'image')\n// 'image'\n```\n */\nfunction data<T>(\n  element: Element | Document | Window,\n  key: string,\n  value: T,\n): T;\n\n/**\n * 获取在指定元素上存储的数据\n *\n * Note: 该方法不检索 `data-*` 属性\n *\n * @param element 用于存储数据的元素\n * @param key 数据键名\n * @example\n```js\ndata(document.body, 'key')\n```\n */\nfunction data(element: Element | Document | Window, key: string): any;\n\n/**\n * 获取指定元素上存储的所有数据\n *\n * Note: 该方法不检索 `data-*` 属性\n *\n * @param element 用于存储数据的元素\n * @example\n```js\ndata(document.body)\n// { 'type': 'image', 'width': 1020, 'height': 680 }\n```\n */\nfunction data(element: Element | Document | Window): PlainObject;\n\n/**\n * 在指定元素上存储数据，返回存储的键值对数据\n * @param element 用于存储数据的元素\n * @param data 键值对数据\n * @example\n```js\ndata(document.body, { 'width': 1020, 'height': 680 })\n// { 'width': 1020, 'height': 680 }\n```\n */\nfunction data<T extends PlainObject>(\n  element: Element | Document | Window,\n  data: T,\n): T;\n\nfunction data(\n  element: Element | Document | Window,\n  key?: string | PlainObject,\n  value?: any,\n): any {\n  // 根据键值对设置值\n  // data(element, { 'key' : 'value' })\n  if (isObjectLike(key)) {\n    setObjectToElement(element, key);\n\n    return key;\n  }\n\n  // 根据 key、value 设置值\n  // data(element, 'key', 'value')\n  if (!isUndefined(value)) {\n    setObjectToElement(element, { [key as string]: value });\n\n    return value;\n  }\n\n  // 获取所有值\n  // data(element)\n  if (isUndefined(key)) {\n    // @ts-ignore\n    return element[dataNS] ? element[dataNS] : {};\n  }\n\n  // 从 dataNS 中获取指定值\n  // data(element, 'key')\n  key = toCamelCase(key);\n  // @ts-ignore\n  if (element[dataNS] && key in element[dataNS]) {\n    // @ts-ignore\n    return element[dataNS][key];\n  }\n\n  return undefined;\n}\n\nexport default data;\n","import $ from '../$';\nimport data from '../functions/data';\nimport PlainObject from '../interfaces/PlainObject';\n\ndeclare module '../interfaces/JQStatic' {\n  interface JQStatic {\n    /**\n     * `value` 为 `undefined` 时，相当于 `$.data(element, key)`，即获取指定元素上存储的数据\n     *\n     * Note: 该方法不检索 `data-*` 属性\n     *\n     * @param element 用于存储数据的元素\n     * @param key 数据键名\n     * @param value `undefined`\n     * @example\n```js\ndata(document.body, 'type', undefined)\n```\n     */\n    data(\n      element: Element | Document | Window,\n      key: string,\n      value: undefined,\n    ): any;\n\n    /**\n     * 在指定元素上存储数据，返回存储的值\n     * @param element 用于存储数据的元素\n     * @param key 数据键名\n     * @param value 数据值\n     * @example\n```js\ndata(document.body, 'type', 'image')\n// 'image'\n```\n     */\n    data<T>(element: Element | Document | Window, key: string, value: T): T;\n\n    /**\n     * 获取在指定元素上存储的数据\n     *\n     * Note: 该方法不检索 `data-*` 属性\n     *\n     * @param element 用于存储数据的元素\n     * @param key 数据键名\n     * @example\n```js\ndata(document.body, 'key')\n```\n     */\n    data(element: Element | Document | Window, key: string): any;\n\n    /**\n     * 获取指定元素上存储的所有数据\n     *\n     * Note: 该方法不检索 data-* 属性\n     *\n     * @param element 用于存储数据的元素\n     * @example\n```js\ndata(document.body)\n// { 'type': 'image', 'width': 1020, 'height': 680 }\n```\n     */\n    data(element: Element | Document | Window): PlainObject;\n\n    /**\n     * 在指定元素上存储数据，返回存储的键值对数据\n     * @param element 用于存储数据的元素\n     * @param data 键值对数据\n     * @example\n```js\ndata(document.body, { 'width': 1020, 'height': 680 })\n// { 'width': 1020, 'height': 680 }\n```\n     */\n    data<T extends PlainObject>(\n      element: Element | Document | Window,\n      data: T,\n    ): T;\n  }\n}\n\n$.data = data;\n","import $ from '../$';\nimport each from '../functions/each';\nimport PlainObject from '../interfaces/PlainObject';\n\ndeclare module '../interfaces/JQStatic' {\n  interface JQStatic {\n    /**\n     * 遍历数组，原样返回第一个参数\n     *\n     * @param array 需要遍历的数组\n     * @param callback 为数组中每个元素执行的回调函数\n     *\n     * 函数的第一个参数为数组的索引，第二个参数为对应的索引的值，`this` 也指向该值\n     *\n     * 函数返回 `false` 时，停止遍历\n     * @example\n```js\n$.each( [ \"a\", \"b\", \"c\" ], function( index, value ){\n  alert( \"Index #\" + index + \": \" + value );\n});\n```\n     */\n    each<T>(\n      array: ArrayLike<T>,\n      callback: (this: T, index: number, value: T) => any | false,\n    ): ArrayLike<T>;\n\n    /**\n     * 遍历对象，原样返回第一个参数\n     *\n     * @param obj 需要遍历的对象\n     * @param callback 为对象中每个元素执行的回调函数\n     *\n     * 函数的第一个参数为对象的键名，第二个参数为对应的键值，`this` 也指向该值\n     *\n     * 函数返回 `false` 时，停止遍历\n     * @example\n```js\n$.each({ name: \"John\", lang: \"JS\" }, function( key, value ) {\n  alert( \"Key: \" + key + \", Value: \" + value );\n});\n```\n     */\n    each<T extends PlainObject, K extends keyof T>(\n      obj: T,\n      callback: (this: T[K], key: K, value: T[K]) => any | false,\n    ): T;\n  }\n}\n\n$.each = each;\n","import $ from '../$';\nimport each from '../functions/each';\nimport extend from '../functions/extend';\nimport PlainObject from '../interfaces/PlainObject';\n\n/**\n * 比 ../functions/extend 函数多了一个 extend<T>(target: T): this & T 的用法\n */\ndeclare module '../interfaces/JQStatic' {\n  interface JQStatic {\n    /**\n     * 将所有对象的属性都添加到第一个对象，并返回合并后的对象。\n     * @param target 其他参数的属性将合并到该参数\n     * @param object1 该对象的属性将合并到第一个参数\n     * @param object2 该对象的属性将合并到第一个参数\n     * @param object3 该对象的属性将合并到第一个参数\n     * @param object4 该对象的属性将合并到第一个参数\n     * @param object5 该对象的属性将合并到第一个参数\n     * @param object6 该对象的属性将合并到第一个参数\n     * @example\n```js\nvar object = extend(\n  { key: value },\n  { key1: value1 },\n  { key2: value2 },\n  { key3: value3 },\n  { key4: value4 },\n  { key5: value5 },\n  { key6: value6 },\n);\n// 此时第一个对象和返回值都是\n{\n  key: value,\n  key1: value1,\n  key2: value2,\n  key3: value3,\n  key4: value4,\n  key5: value5,\n  key6: value6,\n}\n```\n     */\n    extend<\n      T extends PlainObject,\n      U extends PlainObject,\n      V extends PlainObject,\n      W extends PlainObject,\n      X extends PlainObject,\n      Y extends PlainObject,\n      Z extends PlainObject\n    >(\n      target: T,\n      object1: U,\n      object2: V,\n      object3: W,\n      object4: X,\n      object5: Y,\n      object6: Z,\n    ): T & U & V & W & X & Y & Z;\n\n    /**\n     * 将所有对象的属性都添加到第一个对象，并返回合并后的对象。\n     * @param target 其他参数的属性将合并到该参数\n     * @param object1 该对象的属性将合并到第一个参数\n     * @param object2 该对象的属性将合并到第一个参数\n     * @param object3 该对象的属性将合并到第一个参数\n     * @param object4 该对象的属性将合并到第一个参数\n     * @param object5 该对象的属性将合并到第一个参数\n     * @example\n```js\nvar object = extend(\n  { key: value },\n  { key1: value1 },\n  { key2: value2 },\n  { key3: value3 },\n  { key4: value4 },\n  { key5: value5 },\n);\n// 此时第一个对象和返回值都是\n{\n  key: value,\n  key1: value1,\n  key2: value2,\n  key3: value3,\n  key4: value4,\n  key5: value5,\n}\n```\n     */\n    extend<\n      T extends PlainObject,\n      U extends PlainObject,\n      V extends PlainObject,\n      W extends PlainObject,\n      X extends PlainObject,\n      Y extends PlainObject\n    >(\n      target: T,\n      object1: U,\n      object2: V,\n      object3: W,\n      object4: X,\n      object5: Y,\n    ): T & U & V & W & X & Y;\n\n    /**\n     * 将所有对象的属性都添加到第一个对象，并返回合并后的对象。\n     * @param target 其他参数的属性将合并到该参数\n     * @param object1 该对象的属性将合并到第一个参数\n     * @param object2 该对象的属性将合并到第一个参数\n     * @param object3 该对象的属性将合并到第一个参数\n     * @param object4 该对象的属性将合并到第一个参数\n     * @example\n```js\nvar object = extend(\n  { key: value },\n  { key1: value1 },\n  { key2: value2 },\n  { key3: value3 },\n  { key4: value4 },\n);\n// 此时第一个对象和返回值都是\n{\n  key: value,\n  key1: value1,\n  key2: value2,\n  key3: value3,\n  key4: value4,\n}\n```\n     */\n    extend<\n      T extends PlainObject,\n      U extends PlainObject,\n      V extends PlainObject,\n      W extends PlainObject,\n      X extends PlainObject\n    >(\n      target: T,\n      object1: U,\n      object2: V,\n      object3: W,\n      object4: X,\n    ): T & U & V & W & X;\n\n    /**\n     * 将所有对象的属性都添加到第一个对象，并返回合并后的对象。\n     * @param target 其他参数的属性将合并到该参数\n     * @param object1 该对象的属性将合并到第一个参数\n     * @param object2 该对象的属性将合并到第一个参数\n     * @param object3 该对象的属性将合并到第一个参数\n     * @example\n```js\nvar object = extend(\n  { key: value },\n  { key1: value1 },\n  { key2: value2 },\n  { key3: value3 },\n);\n// 此时第一个对象和返回值都是\n{\n  key: value,\n  key1: value1,\n  key2: value2,\n  key3: value3,\n}\n```\n     */\n    extend<\n      T extends PlainObject,\n      U extends PlainObject,\n      V extends PlainObject,\n      W extends PlainObject\n    >(\n      target: T,\n      object1: U,\n      object2: V,\n      object3: W,\n    ): T & U & V & W;\n\n    /**\n     * 将所有对象的属性都添加到第一个对象，并返回合并后的对象。\n     * @param target 其他参数的属性将合并到该参数\n     * @param object1 该对象的属性将合并到第一个参数\n     * @param object2 该对象的属性将合并到第一个参数\n     * @example\n```js\nvar object = extend(\n  { key: value },\n  { key1: value1 },\n  { key2: value2 },\n);\n// 此时第一个对象和返回值都是\n{\n  key: value,\n  key1: value1,\n  key2: value2,\n}\n```\n     */\n    extend<T extends PlainObject, U extends PlainObject, V extends PlainObject>(\n      target: T,\n      object1: U,\n      object2: V,\n    ): T & U & V;\n\n    /**\n     * 将所有对象的属性都添加到第一个对象，并返回合并后的对象。\n     * @param target 其他参数的属性将合并到该参数\n     * @param object1 该对象的属性将合并到第一个参数\n     * @example\n```js\nvar object = extend(\n  { key: value },\n  { key1: value1 },\n);\n// 此时第一个对象和返回值都是\n{\n  key: value,\n  key1: value1,\n}\n```\n     */\n    extend<T extends PlainObject, U extends PlainObject>(\n      target: T,\n      object1: U,\n    ): T & U;\n\n    /**\n     * 将对象属性扩展到 $ 命名空间中\n     * @param target 该对象的属性将扩展到 $ 命名空间中\n     * @example\n```js\n$.extend({\n  customFunc: function () {}\n})\n\n// 然后就可以这样调用自定义方法了\n$.customFunc()\n```\n     */\n    extend<T extends PlainObject>(target: T): this & T;\n\n    /**\n     * 将所有对象的属性都添加到第一个对象，并返回合并后的对象。\n     * @param target 其他参数的属性将合并到该参数\n     * @param object1 该对象的属性将合并到第一个参数\n     * @param objectN 额外的对象，这些对象的属性将合并到第一个对象\n     * @example\n```js\nvar object = extend(\n  { key: value },\n  { key1: value1 },\n  { key2: value2 },\n);\n// 此时第一个对象和返回值都是\n{\n  key: value,\n  key1: value1,\n  key2: value2,\n}\n```\n     */\n    extend(\n      target: PlainObject,\n      object1: PlainObject,\n      ...objectN: PlainObject[]\n    ): PlainObject;\n  }\n}\n\n$.extend = function (...objectN: PlainObject[]): any {\n  if (objectN.length === 1) {\n    each(objectN[0], (prop, value) => {\n      this[prop] = value;\n    });\n\n    return this;\n  }\n\n  return extend(\n    objectN.shift() as PlainObject,\n    objectN.shift() as PlainObject,\n    ...objectN,\n  );\n};\n","import PlainObject from '../interfaces/PlainObject';\nimport each from './each';\n\n/**\n * 遍历数组，通过函数返回值生成一个新数组\n *\n * @param array 被遍历的数组\n * @param callback 处理每个元素的回调函数\n *\n * 函数的第一个参数是数组值，第二个参数是数组索引，`this` 指向 `window` 对象\n *\n * 函数可以返回任何值，若返回数组，则会被展开；若返回 `null` 或 `undefined`，则不会被放入新生成的数组中\n * @example\n```js\n// 数组的每个元素都 +4\nmap([0, 1, 2], function(value){\n  return value + 4;\n});\n// [4, 5, 6]\n```\n * @example\n```js\n// 移除小于 2 的值\nmap([0, 1, 2, 3], function(value){\n  return value >= 2 ? value : null;\n});\n// [2, 3]\n```\n * @example\n```js\n// 返回数组时，展开\nmap([1, 2, 3], function(value, index){\n    return [index, value];\n});\n// [0, 1, 1, 2, 2, 3]\n```\n */\nfunction map<T, TReturn>(\n  array: ArrayLike<T>,\n  callback: (\n    this: Window,\n    value: T,\n    index: number,\n  ) => TReturn | TReturn[] | null | undefined,\n): TReturn[];\n\n/**\n * 循环对象，通过函数返回值生成一个新数组\n *\n * @param obj 被遍历的对象\n * @param callback 处理每个元素的回调函数\n *\n * 函数的第一个参数为对象值，第二个参数为对象键，`this` 指向 `window` 对象\n *\n * 函数可以返回任何值，若返回数组，则会被展开；若返回 `null` 或 `undefined`，则不会被放入新生成的数组中\n * @example\n```js\n// 值 +2\nmap({ width: 1, height: 2 }, function(value, key){\n  return value + 2;\n});\n// [3, 4]\n```\n * @example\n```js\n// 获取键名组成的数组\nmap({ width: 1, height: 2 }, function(value, key){\n  return key;\n});\n// ['width', 'height']\n```\n * @example\n```js\n// 返回数组时，展开\nmap({ width: 1, height: 2 }, function(value, key){\n  return [key, value];\n});\n// ['width', 1, 'height', 2]\n```\n */\nfunction map<T extends PlainObject, K extends keyof T, TReturn>(\n  obj: T,\n  callback: (\n    this: Window,\n    value: T[K],\n    key: K,\n  ) => TReturn | TReturn[] | null | undefined,\n): TReturn[];\n\nfunction map(elements: any, callback: Function): any {\n  let value;\n  const ret: any[] = [];\n\n  each(elements, (i, element) => {\n    value = callback.call(window, element, i);\n\n    if (value != null) {\n      ret.push(value);\n    }\n  });\n\n  return [].concat(...ret);\n}\n\nexport default map;\n","import $ from '../$';\nimport map from '../functions/map';\nimport PlainObject from '../interfaces/PlainObject';\n\ndeclare module '../interfaces/JQStatic' {\n  interface JQStatic {\n    /**\n     * 遍历数组，通过函数返回值生成一个新数组\n     *\n     * @param array 被遍历的数组\n     * @param callback 处理每个元素的回调函数\n     *\n     * 第一个参数是数组值，第二个参数是数组索引，`this` 指向 `window` 对象\n     *\n     * 函数可以返回任何值，若返回数组，则会被展开；若返回 `null` 或 `undefined`，则不会被放入新生成的数组中\n     * @example\n```js\n// 数组的每个元素都 +4\nmap([0, 1, 2], function(value){\n  return value + 4;\n});\n// [4, 5, 6]\n```\n     * @example\n```js\n// 移除小于 2 的值\nmap([0, 1, 2, 3], function(value){\n  return value >= 2 ? value : null;\n});\n// [2, 3]\n```\n     * @example\n```js\n// 返回数组时，展开\nmap([1, 2, 3], function(value, index){\n    return [index, value];\n});\n// [0, 1, 1, 2, 2, 3]\n```\n     */\n    map<T, TReturn>(\n      array: ArrayLike<T>,\n      callback: (\n        this: Window,\n        value: T,\n        index: number,\n      ) => TReturn | TReturn[] | null | undefined,\n    ): TReturn[];\n\n    /**\n     * 循环对象，通过函数返回值生成一个新数组\n     *\n     * @param obj 被遍历的对象\n     * @param callback 处理每个元素的回调函数\n     *\n     * 第一个参数为对象值，第二个参数为对象键，`this` 指向 `window` 对象\n     *\n     * 函数可以返回任何值，若返回数组，则会被展开；若返回 `null` 或 `undefined`，则不会被放入新生成的数组中\n     * @example\n```js\n// 值 +2\nmap({ width: 1, height: 2 }, function(value, key){\n  return value + 2;\n});\n// [3, 4]\n```\n     * @example\n```js\n// 获取键名组成的数组\nmap({ width: 1, height: 2 }, function(value, key){\n  return key;\n});\n// ['width', 'height']\n```\n     * @example\n```js\n// 返回数组时，展开\nmap({ width: 1, height: 2 }, function(value, key){\n  return [key, value];\n});\n// ['width', 1, 'height', 2]\n```\n     */\n    map<T extends PlainObject, K extends keyof T, TReturn>(\n      obj: T,\n      callback: (\n        this: Window,\n        value: T[K],\n        key: K,\n      ) => TReturn | TReturn[] | null | undefined,\n    ): TReturn[];\n  }\n}\n\n$.map = map;\n","import $ from '../$';\nimport merge from '../functions/merge';\n\ndeclare module '../interfaces/JQStatic' {\n  interface JQStatic {\n    /**\n     * 把第二个数组的元素追加到第一个数组中，并返回合并后的数组\n     * @param first 第一个数组\n     * @param second 该数组的元素将被追加到第一个数组中\n     * @example\n```js\n$.merge( [ 0, 1, 2 ], [ 2, 3, 4 ] )\n// [ 0, 1, 2, 2, 3, 4 ]\n```\n     */\n    merge<T, U>(first: T[], second: U[]): Array<T | U>;\n  }\n}\n\n$.merge = merge;\n","import $ from '../$';\nimport param from '../functions/param';\nimport PlainObject from '../interfaces/PlainObject';\n\ndeclare module '../interfaces/JQStatic' {\n  interface JQStatic {\n    /**\n     * 将数组或对象序列化，序列化后的字符串可作为 URL 查询字符串使用\n     *\n     * 若传入数组，则格式必须和 serializeArray 方法的返回值一样\n     * @param obj 对象或数组\n     * @example\n```js\nparam({ width: 1680, height: 1050 });\n// width=1680&height=1050\n```\n     * @example\n```js\nparam({ foo: { one: 1, two: 2 }})\n// foo[one]=1&foo[two]=2\n```\n     * @example\n```js\nparam({ids: [1, 2, 3]})\n// ids[]=1&ids[]=2&ids[]=3\n```\n     * @example\n```js\nparam([\n  {\"name\":\"name\",\"value\":\"mdui\"},\n  {\"name\":\"password\",\"value\":\"123456\"}\n])\n// name=mdui&password=123456\n```\n */\n    param(obj: any[] | PlainObject): string;\n  }\n}\n\n$.param = param;\n","import each from '../functions/each';\nimport TypeOrArray from '../types/TypeOrArray';\nimport { isUndefined, isString, toCamelCase } from '../utils';\nimport dataNS from './utils/data';\n\n/**\n * 移除指定元素上存放的数据\n * @param element 存放数据的元素\n * @param name\n * 数据键名\n *\n * 若未指定键名，将移除元素上所有数据\n *\n * 多个键名可以用空格分隔，或者用数组表示多个键名\n  @example\n```js\n// 移除元素上键名为 name 的数据\nremoveData(document.body, 'name');\n```\n * @example\n```js\n// 移除元素上键名为 name1 和 name2 的数据\nremoveData(document.body, 'name1 name2');\n```\n * @example\n```js\n// 移除元素上键名为 name1 和 name2 的数据\nremoveData(document.body, ['name1', 'name2']);\n```\n * @example\n```js\n// 移除元素上所有数据\nremoveData(document.body);\n```\n */\nfunction removeData(\n  element: Element | Document | Window,\n  name?: TypeOrArray<string>,\n): void {\n  // @ts-ignore\n  if (!element[dataNS]) {\n    return;\n  }\n\n  const remove = (nameItem: string): void => {\n    nameItem = toCamelCase(nameItem);\n\n    // @ts-ignore\n    if (element[dataNS][nameItem]) {\n      // @ts-ignore\n      element[dataNS][nameItem] = null;\n      // @ts-ignore\n      delete element[dataNS][nameItem];\n    }\n  };\n\n  if (isUndefined(name)) {\n    // @ts-ignore\n    element[dataNS] = null;\n    // @ts-ignore\n    delete element[dataNS];\n    // @ts-ignore\n  } else if (isString(name)) {\n    name\n      .split(' ')\n      .filter((nameItem) => nameItem)\n      .forEach((nameItem) => remove(nameItem));\n  } else {\n    each(name, (_, nameItem) => remove(nameItem));\n  }\n}\n\nexport default removeData;\n","import $ from '../$';\nimport removeData from '../functions/removeData';\nimport TypeOrArray from '../types/TypeOrArray';\n\ndeclare module '../interfaces/JQStatic' {\n  interface JQStatic {\n    /**\n     * 移除指定元素上存放的数据\n     * @param element 存放数据的元素\n     * @param name\n     * 数据键名\n     *\n     * 若未指定键名，将移除元素上所有数据\n     *\n     * 多个键名可以用空格分隔，或者用数组表示多个键名\n     * @example\n```js\n// 移除元素上键名为 name 的数据\n$.removeData(document.body, 'name');\n```\n     * @example\n```js\n// 移除元素上键名为 name1 和 name2 的数据\n$.removeData(document.body, 'name1 name2');\n```\n     * @example\n```js\n// 移除元素上键名为 name1 和 name2 的数据\n$.removeData(document.body, ['name1', 'name2']);\n```\n     * @example\n```js\n// 移除元素上所有数据\n$.removeData(document.body);\n```\n     */\n    removeData(\n      element: Element | Document | Window,\n      name?: TypeOrArray<string>,\n    ): void;\n  }\n}\n\n$.removeData = removeData;\n","import each from './each';\n\n/**\n * 过滤掉数组中的重复元素\n * @param arr 数组\n * @example\n```js\nunique([1, 2, 12, 3, 2, 1, 2, 1, 1]);\n// [1, 2, 12, 3]\n```\n */\nfunction unique(arr: any[]): any[] {\n  const result: any[] = [];\n\n  each(arr, (_, val) => {\n    if (result.indexOf(val) === -1) {\n      result.push(val);\n    }\n  });\n\n  return result;\n}\n\nexport default unique;\n","import $ from '../$';\nimport unique from '../functions/unique';\n\ndeclare module '../interfaces/JQStatic' {\n  interface JQStatic {\n    /**\n     * 过滤掉数组中的重复元素\n     * @param arr 数组\n     * @example\n```js\nunique([1, 2, 12, 3, 2, 1, 2, 1, 1]);\n// [1, 2, 12, 3]\n```\n     */\n    unique(arr: any[]): any[];\n  }\n}\n\n$.unique = unique;\n","import $ from '../$';\nimport merge from '../functions/merge';\nimport unique from '../functions/unique';\nimport { JQ } from '../JQ';\nimport TypeOrArray from '../types/TypeOrArray';\nimport './get';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 添加元素到当前 JQ 对象中\n     * @param selector 可以是 HTML 字符串、CSS 选择器、JQ 对象、DOM 元素、DOM 元素数组、NodeList 等\n     * @example\n```js\n// 把含 .selected 的元素添加到当前 JQ 对象中\n$('.box').add('.selected');\n```\n     */\n    add(selector: string | TypeOrArray<Element> | JQ | null): this;\n  }\n}\n\n$.fn.add = function (this: JQ, selector: any): JQ {\n  return new JQ(unique(merge(this.get(), $(selector).get())));\n};\n","import $ from '../$';\nimport each from '../functions/each';\nimport { JQ } from '../JQ';\nimport { isElement, isFunction } from '../utils';\nimport './each';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 在当前元素上添加 CSS 类\n     * @param className\n     * CSS 类名的字符串，多个类名可以用空格分隔\n     *\n     * 也可以是一个返回 CSS 类名的回调函数。回调函数的第一个参数为元素的索引位置，第二个参数为旧的 CSS 类名，`this` 指向当前元素\n     * @example\n```js\n// 在 p 元素上加上 item 类\n$('p').addClass('item')\n```\n     * @example\n```js\n// 在 p 元素上加上 item1 和 item2 两个类\n$('p').addClass('item1 item2')\n```\n     * @example\n```js\n// 在 p 元素上添加由回调函数返回的类\n$('p').addClass(function (index, currentClassName) {\n  return currentClassName + '-' + index;\n});\n```\n     */\n    addClass(\n      className:\n        | string\n        | ((this: T, index: number, currentClassName: string) => string),\n    ): this;\n  }\n}\n\ntype classListMethod = 'add' | 'remove' | 'toggle';\n\neach(['add', 'remove', 'toggle'], (_, name: classListMethod) => {\n  $.fn[`${name}Class`] = function (\n    this: JQ,\n    className:\n      | string\n      | ((this: any, index: number, currentClassName: string) => string),\n  ): JQ {\n    if (name === 'remove' && !arguments.length) {\n      return this.each((_, element) => {\n        element.setAttribute('class', '');\n      });\n    }\n\n    return this.each((i, element) => {\n      if (!isElement(element)) {\n        return;\n      }\n\n      const classes = (isFunction(className)\n        ? className.call(element, i, element.getAttribute('class') || '')\n        : className\n      )\n        .split(' ')\n        .filter((name) => name);\n\n      each(classes, (_, cls) => {\n        element.classList[name](cls);\n      });\n    });\n  };\n});\n","import $ from '../$';\nimport each from '../functions/each';\nimport { JQ } from '../JQ';\nimport HTMLString from '../types/HTMLString';\nimport Selector from '../types/Selector';\nimport TypeOrArray from '../types/TypeOrArray';\nimport './each';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 把当前集合中的元素插入到指定元素的前面，作为目标元素的兄弟元素\n     *\n     * 如果当前集合中的元素是页面中已有的元素，则将移动该元素，而不是复制\n     *\n     * 如果有多个目标元素，则将克隆当前集合中的元素，并添加到每个目标元素的前面\n     * @param target 可以是 CSS 选择器、HTML 字符串、DOM 元素、DOM 元素数组、JQ 对象\n     * @returns 由新插入的元素组成的集合\n     * @example\n```js\n$('<p>I would like to say: </p>').insertBefore('<b>Hello</b>');\n// <p>I would like to say: </p><b>Hello</b>\n```\n     */\n    insertBefore(\n      target: Selector | HTMLString | TypeOrArray<Node> | JQ<Node>,\n    ): this;\n  }\n}\n\neach(['insertBefore', 'insertAfter'], (nameIndex, name) => {\n  $.fn[name] = function (this: JQ, target: any): JQ {\n    const $element = nameIndex ? $(this.get().reverse()) : this; // 顺序和 jQuery 保持一致\n    const $target = $(target);\n    const result: HTMLElement[] = [];\n\n    $target.each((index, target) => {\n      if (!target.parentNode) {\n        return;\n      }\n\n      $element.each((_, element) => {\n        const newItem = index\n          ? (element.cloneNode(true) as HTMLElement)\n          : element;\n        const existingItem = nameIndex ? target.nextSibling : target;\n\n        result.push(newItem as HTMLElement);\n        target.parentNode.insertBefore(newItem, existingItem);\n      });\n    });\n\n    return $(nameIndex ? result.reverse() : result);\n  };\n});\n","import $ from '../$';\nimport each from '../functions/each';\nimport { JQ } from '../JQ';\nimport HTMLString from '../types/HTMLString';\nimport TypeOrArray from '../types/TypeOrArray';\nimport { getChildNodesArray, isFunction, isString, isElement } from '../utils';\nimport './each';\nimport './insertAfter';\nimport './insertBefore';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 在当前元素前面插入指定内容，作为其兄弟节点。支持传入多个参数。\n     * @param contents HTML 字符串、DOM 元素、DOM 元素数组、或 JQ 对象\n     * @returns 原始集合\n     * @example\n```js\n$('<p>I would like to say: </p>').before('<b>Hello</b>')\n// <b>Hello</b><p>I would like to say: </p>\n```\n     * @example\n```js\n$('<p>I would like to say: </p>').before('<b>Hello</b>', '<b>World</b>')\n// <b>Hello</b><b>World</b><p>I would like to say: </p>\n```\n     */\n    before(...contents: Array<HTMLString | TypeOrArray<Node> | JQ<Node>>): this;\n\n    /**\n     * 在当前元素前面插入指定内容，作为其兄弟节点\n     * @param callback\n     * 一个返回 HTML 字符串、DOM 元素、DOM 元素数组、或 JQ 对象的回调函数\n     *\n     * 函数的第一个参数为元素的索引位置，第二个参数为元素的旧的 HTML 值，`this` 指向当前元素\n     * @returns 原始集合\n     * @example\n```js\n$('<p>Hello</p>').before(function (index, html) {\n  return '<b>' + html + index + '</b>';\n});\n// <b>Hello0</b><p>Hello</p>\n```\n     */\n    before(\n      callback: (\n        this: T,\n        index: number,\n        oldHtml: string,\n      ) => HTMLString | TypeOrArray<Node> | JQ<Node>,\n    ): this;\n  }\n}\n\n/**\n * 是否不是 HTML 字符串（包裹在 <> 中）\n * @param target\n */\nfunction isPlainText(target: string): boolean {\n  return (\n    isString(target) && (target[0] !== '<' || target[target.length - 1] !== '>')\n  );\n}\n\neach(['before', 'after'], (nameIndex, name) => {\n  $.fn[name] = function (this: JQ, ...args: any[]): JQ {\n    // after 方法，多个参数需要按参数顺序添加到元素后面，所以需要将参数顺序反向处理\n    if (nameIndex === 1) {\n      args = args.reverse();\n    }\n\n    return this.each((index, element) => {\n      const targets = isFunction(args[0])\n        ? [args[0].call(element, index, element.innerHTML)]\n        : args;\n\n      each(targets, (_, target) => {\n        let $target: JQ;\n\n        if (isPlainText(target)) {\n          $target = $(getChildNodesArray(target, 'div') as HTMLElement[]);\n        } else if (index && isElement(target)) {\n          $target = $(target.cloneNode(true) as HTMLElement);\n        } else {\n          $target = $(target);\n        }\n\n        $target[nameIndex ? 'insertAfter' : 'insertBefore'](element);\n      });\n    });\n  };\n});\n","import $ from '../$';\nimport each from '../functions/each';\nimport PlainObject from '../interfaces/PlainObject';\nimport { JQ } from '../JQ';\nimport { isFunction, isObjectLike, returnFalse } from '../utils';\nimport './each';\nimport { EventCallback, remove } from './utils/event';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 解除通过事件委托绑定的指定事件\n     * @param eventName\n     * 事件名称，多个事件名可以用空格分隔，如 `click`, `click dbclick`\n     *\n     * 事件名中可以包含命名空间，或者只包含命名空间，如 `keydown.myPlugin`, `.myPlugin`。\n     * @param selector CSS 选择器\n     * @param callback 事件处理函数\n     * @example\n```js\n$(document).off('click', '.box', functionName);\n```\n     * @example\n```js\n$(document).off('click dbclick', '.box', functionName);\n```\n     * @example\n```js\n$(document).off('click', '.box');\n```\n     * @example\n```js\n$(document).off('click dbclick', '.box');\n```\n     */\n    off(\n      eventName: string,\n      selector: string,\n      callback?: EventCallback | false,\n    ): this;\n\n    /**\n     * 解除绑定的指定事件\n     * @param eventName\n     * 事件名称，多个事件名可以用空格分隔，如 `click`, `click dbclick`\n     *\n     * 事件名中可以包含命名空间，或者只包含命名空间，如 `keydown.myPlugin`, `.myPlugin`。\n     * @param callback 事件处理函数\n     * @example\n```js\n$('.box').off('click', functionName);\n```\n     * @example\n```js\n$('.box').off('click dbclick', functionName);\n```\n     * @example\n```js\n$('.box').off('click');\n```\n     * @example\n```js\n$('.box').off('click dbclick');\n```\n     */\n    off(eventName: string, callback?: EventCallback | false): this;\n\n    /**\n     * 同时移除多个事件处理函数\n     * @param events\n     * 一个对象：\n     *\n     * 键名为事件名，多个事件名用空格分隔，可包含命名空间；\n     *\n     * 键值为事件处理函数\n     * @param selector CSS 选择器\n     * @example\n```js\n$('.wrapper').off({\n  'click': functionName,\n  'dbclick': functionName,\n}, '.box')\n```\n     * @example\n```js\n$('.wrapper').off({\n  'click': functionName,\n  'dbclick': functionName,\n})\n```\n     */\n    off(events: PlainObject<EventCallback | false>, selector?: string): this;\n\n    /**\n     * 删除所有绑定的事件处理函数\n     * @example\n```js\n$('.wrapper').off();\n```\n     */\n    off(): this;\n  }\n}\n\n$.fn.off = function (\n  this: JQ,\n  types?: PlainObject<EventCallback | false> | string,\n  selector?: any,\n  callback?: any,\n): any {\n  // types 是对象\n  if (isObjectLike(types)) {\n    each(types, (type: string, fn: EventCallback | false) => {\n      // this.off('click', undefined, function () {})\n      // this.off('click', '.box', function () {})\n      this.off(type, selector, fn);\n    });\n\n    return this;\n  }\n\n  // selector 不存在\n  if (selector === false || isFunction(selector)) {\n    callback = selector;\n    selector = undefined;\n    // this.off('click', undefined, function () {})\n  }\n\n  // callback 传入 `false`，相当于 `return false`\n  if (callback === false) {\n    callback = returnFalse;\n  }\n\n  return this.each(function () {\n    remove(this, types, callback, selector);\n  });\n};\n","import $ from '../$';\nimport each from '../functions/each';\nimport PlainObject from '../interfaces/PlainObject';\nimport { JQ } from '../JQ';\nimport { isObjectLike, isString, returnFalse } from '../utils';\nimport './each';\nimport './off';\nimport { EventCallback, add } from './utils/event';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 通过事件委托同时添加多个事件处理函数\n     * @param events\n     * 一个对象：\n     *\n     * 键名为事件名，多个事件名用空格分隔，可包含命名空间；\n     *\n     * 键值为事件处理函数\n     * @param selector CSS 选择器\n     * @param data\n     * 事件触发时，传递给事件处理函数的数据\n     *\n     * 如果 `data` 是 `string` 类型，则必须提供 `selector` 参数；`selector` 参数可以是 `null`\n     */\n    on(\n      events: PlainObject<EventCallback | false>,\n      selector: string | null | undefined,\n      data?: any,\n    ): this;\n\n    /**\n     * 同时添加多个事件处理函数\n     * @param events\n     * 一个对象：\n     *\n     * 键名为事件名，多个事件名用空格分隔，可包含命名空间；\n     *\n     * 键值为事件处理函数\n     * @param data\n     * 事件触发时，传递给事件处理函数的数据\n     *\n     * 如果 `data` 是 `string` 类型，则必须提供 `selector` 参数；`selector` 参数可以是 `null`\n     */\n    on(events: PlainObject<EventCallback | false>, data?: any): this;\n\n    /**\n     * 通过事件委托添加事件处理函数，并传入参数\n     * @param eventName\n     * 事件名称，多个事件名可以用空格分隔\n     *\n     * 事件名中可以包含命名空间，如 `click.myPlugin`\n     * @param selector CSS 选择器\n     * @param data\n     * 事件触发时，传递给事件处理函数的数据\n     *\n     * 如果 `data` 是 `string` 类型，则必须提供 `selector` 参数；`selector` 参数可以是 `null`\n     * @param callback 事件处理函数\n     */\n    on(\n      eventName: string,\n      selector: string | null | undefined,\n      data: any,\n      callback: EventCallback | false,\n    ): this;\n\n    /**\n     * 通过事件委托添加事件处理函数\n     * @param eventName\n     * 事件名称，多个事件名可以用空格分隔\n     *\n     * 事件名中可以包含命名空间，如 `click.myPlugin`\n     * @param selector CSS 选择器\n     * @param callback 事件处理函数\n     */\n    on(\n      eventName: string,\n      selector: string,\n      callback: EventCallback | false,\n    ): this;\n\n    /**\n     * 添加事件处理函数，并传入参数\n     * @param eventName\n     * 事件名称，多个事件名可以用空格分隔\n     *\n     * 事件名中可以包含命名空间，如 `click.myPlugin`\n     * @param data 事件触发时，传递给事件处理函数的数据\n     * @param callback 事件处理函数\n     */\n    on(eventName: string, data: any, callback: EventCallback | false): this;\n\n    /**\n     * 添加事件处理函数\n     * @param eventName\n     * 事件名称，多个事件名可以用空格分隔\n     *\n     * 事件名中可以包含命名空间，如 `click.myPlugin`\n     * @param callback 事件处理函数\n     */\n    on(eventName: string, callback: EventCallback | false): this;\n  }\n}\n\n$.fn.on = function (\n  this: JQ,\n  types: PlainObject<EventCallback | false> | string,\n  selector: any,\n  data?: any,\n  callback?: any,\n  one?: boolean, // 是否是 one 方法，只在 JQ 内部使用\n): JQ {\n  // types 可以是 type/func 对象\n  if (isObjectLike(types)) {\n    // (types-Object, selector, data)\n    if (!isString(selector)) {\n      // (types-Object, data)\n      data = data || selector;\n      selector = undefined;\n    }\n\n    each(types, (type: string, fn: EventCallback | false) => {\n      // selector 和 data 都可能是 undefined\n      // @ts-ignore\n      this.on(type, selector, data, fn, one);\n    });\n\n    return this;\n  }\n\n  if (data == null && callback == null) {\n    // (types, fn)\n    callback = selector;\n    data = selector = undefined;\n  } else if (callback == null) {\n    if (isString(selector)) {\n      // (types, selector, fn)\n      callback = data;\n      data = undefined;\n    } else {\n      // (types, data, fn)\n      callback = data;\n      data = selector;\n      selector = undefined;\n    }\n  }\n\n  if (callback === false) {\n    callback = returnFalse;\n  } else if (!callback) {\n    return this;\n  }\n\n  // $().one()\n  if (one) {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const _this = this;\n    const origCallback: Function = callback;\n\n    callback = function (\n      this: Element | Document | Window,\n      event: Event,\n    ): void {\n      _this.off(event.type, selector, callback);\n\n      // eslint-disable-next-line prefer-rest-params\n      return origCallback.apply(this, arguments);\n    };\n  }\n\n  return this.each(function () {\n    add(this, types, callback, data, selector);\n  });\n};\n","import $ from '../$';\nimport each from '../functions/each';\nimport { ajaxEvents } from '../functions/utils/ajax';\nimport { JQ } from '../JQ';\nimport { GlobalCallback, GlobalSuccessCallback } from '../types/JQAjax';\nimport './on';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 监听全局 Ajax 开始事件\n     * 通过 $(document).on('start.mdui.ajax', function (event, params) {}) 调用时，包含两个参数\n     * event: 事件对象\n     * params: {\n     *   xhr: XMLHttpRequest 对象\n     *   options: ajax 请求的配置参数\n     * }\n     * @param handler\n     * @example\n```js\n$(document).ajaxStart(function (event, xhr, options) {});\n```\n     */\n    ajaxStart(handler: GlobalCallback): this;\n  }\n}\n\neach(ajaxEvents, (name, eventName) => {\n  $.fn[name] = function (\n    this: JQ,\n    fn: GlobalCallback | GlobalSuccessCallback,\n  ): any {\n    return this.on(eventName, (e, params) => {\n      fn(e, params.xhr, params.options, params.data);\n    });\n  };\n});\n","import $ from '../$';\nimport map from '../functions/map';\nimport { JQ } from '../JQ';\nimport TypeOrArray from '../types/TypeOrArray';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 为当前集合中的每个元素都调用一个函数，生成一个包含函数返回值的新的集合\n     * @param callback\n     * 执行的回调函数\n     *\n     * 函数的第一个参数为元素的索引位置，第二个参数为当前元素，`this` 指向当前元素\n     *\n     * 函数可以返回单个数据或数据数组。若返回数组，则会将数组中的元素依次添加到新集合中\n     *\n     * 若函数返回 `null` 或 `undefined`，则不会添加到新集合中\n     * @example\n```js\nconst result = $('input.checked').map(function (i, element) {\n  return element.value;\n});\n```\n     */\n    map<TReturn>(\n      callback: (\n        this: T,\n        index: number,\n        element: T,\n      ) => TypeOrArray<TReturn> | null | undefined,\n    ): JQ<TReturn>;\n  }\n}\n\n$.fn.map = function (\n  this: JQ<any>,\n  callback: (this: any, index: number, element: any) => null | undefined | any,\n): JQ {\n  return new JQ(map(this, (element, i) => callback.call(element, i, element)));\n};\n","import $ from '../$';\nimport { JQ } from '../JQ';\nimport './map';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 通过深度克隆来复制集合中的所有元素\n     *\n     * 通过原生 cloneNode 方法深度克隆来复制集合中的所有元素。此方法不会有数据和事件处理程序复制到新的元素。这点和jquery中利用一个参数来确定是否复制数据和事件处理不相同。\n     * @example\n```js\n$('body').append($(\"#box\").clone())\n```\n     */\n    clone(): this;\n  }\n}\n\n$.fn.clone = function (this: JQ): JQ {\n  return this.map(function () {\n    return this.cloneNode(true) as HTMLElement;\n  });\n};\n","import $ from '../$';\nimport { JQ } from '../JQ';\nimport Selector from '../types/Selector';\nimport TypeOrArray from '../types/TypeOrArray';\nimport { isDocument, isFunction, isString, isWindow } from '../utils';\nimport './each';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 如果集合中至少一个元素和参数匹配，则返回 `true`，否则返回 `false`\n     * @param selector\n     * 可以是 CSS 选择器、DOM 元素、DOM 元素数组、JQ 对象、或回调函数\n     *\n     * 回调函数的第一个参数为元素的索引位置、第二个参数为当前元素，`this` 指向当前元素\n     *\n     * 若回调函数返回 `true`，则表示和当前元素匹配；若返回 `false`，表示和当前元素不匹配\n     * @example\n```js\n$('.box').is('.box') // true\n$('.box').is('.boxss'); // false\n```\n     */\n    is(\n      selector:\n        | Selector\n        | TypeOrArray<Element>\n        | JQ\n        | ((this: T, index: number, element: T) => boolean),\n    ): boolean;\n  }\n}\n\n$.fn.is = function (this: JQ, selector: any): boolean {\n  let isMatched = false;\n\n  if (isFunction(selector)) {\n    this.each((index, element) => {\n      if (selector.call(element, index, element)) {\n        isMatched = true;\n      }\n    });\n\n    return isMatched;\n  }\n\n  if (isString(selector)) {\n    this.each((_, element) => {\n      if (isDocument(element) || isWindow(element)) {\n        return;\n      }\n\n      // @ts-ignore\n      const matches = element.matches || element.msMatchesSelector;\n\n      if (matches.call(element, selector)) {\n        isMatched = true;\n      }\n    });\n\n    return isMatched;\n  }\n\n  const $compareWith = $(selector);\n\n  this.each((_, element) => {\n    $compareWith.each((_, compare) => {\n      if (element === compare) {\n        isMatched = true;\n      }\n    });\n  });\n\n  return isMatched;\n};\n","import $ from '../$';\nimport { JQ } from '../JQ';\nimport Selector from '../types/Selector';\nimport './each';\nimport './is';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 从 DOM 中移除当前集合中的元素\n     * @param selector CSS 选择器。若指定了该参数，则仅移除当前集合中和该参数匹配的元素\n     * @example\n```js\n// 移除所有 p 元素\n$('p').remove()\n```\n     * @example\n```js\n// 移除所有含 .box 的 p 元素\n$('p').remove('.box')\n```\n     */\n    remove(selector?: Selector): this;\n  }\n}\n\n$.fn.remove = function (this: JQ, selector?: Selector): JQ {\n  return this.each((_, element) => {\n    if (element.parentNode && (!selector || $(element).is(selector))) {\n      element.parentNode.removeChild(element);\n    }\n  });\n};\n","import $ from '../$';\nimport each from '../functions/each';\nimport { JQ } from '../JQ';\nimport HTMLString from '../types/HTMLString';\nimport TypeOrArray from '../types/TypeOrArray';\nimport { isFunction, isString } from '../utils';\nimport './after';\nimport './before';\nimport './clone';\nimport './each';\nimport './map';\nimport './remove';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 在当前元素内部的后面插入指定内容。支持传入多个参数\n     * @param contents HTML 字符串、DOM 元素、DOM 元素数组、或 JQ 对象\n     * @returns 原始集合\n     * @example\n```js\n$('<p>I would like to say: </p>').append('<b>Hello</b>');\n// <p>I would like to say: <b>Hello</b></p>\n```\n     * @example\n```js\n$('<p>I would like to say: </p>').append('<b>Hello</b>', '<b>World</b>');\n// <p>I would like to say: <b>Hello</b><b>World</b></p>\n```\n     */\n    append(...contents: Array<HTMLString | TypeOrArray<Node> | JQ<Node>>): this;\n\n    /**\n     * 在当前元素内部的后面插入指定内容\n     * @param callback\n     * 一个返回 HTML 字符串、DOM 元素、DOM 元素数组、或 JQ 对象的回调函数\n     *\n     * 函数的第一个参数为元素的索引位置，第二个参数为元素的旧的 HTML 值，`this` 指向当前元素\n     * @returns 原始集合\n     * @example\n```js\n$('<p>Hello</p>').append(function (index, html) {\n  return '<b>' + html + index + '</b>';\n});\n// <p>Hello<b>Hello0</b></p>\n```\n     */\n    append(\n      callback: (\n        this: T,\n        index: number,\n        oldHTML: string,\n      ) => HTMLString | TypeOrArray<Node> | JQ<Node>,\n    ): this;\n  }\n}\n\neach(['prepend', 'append'], (nameIndex, name) => {\n  $.fn[name] = function (this: JQ, ...args: any[]): JQ {\n    return this.each((index, element) => {\n      const childNodes = element.childNodes;\n      const childLength = childNodes.length;\n\n      const child = childLength\n        ? childNodes[nameIndex ? childLength - 1 : 0]\n        : document.createElement('div');\n\n      if (!childLength) {\n        element.appendChild(child);\n      }\n\n      let contents = isFunction(args[0])\n        ? [args[0].call(element, index, element.innerHTML)]\n        : args;\n\n      // 如果不是字符串，则仅第一个元素使用原始元素，其他的都克隆自第一个元素\n      if (index) {\n        contents = contents.map((content) => {\n          return isString(content) ? content : $(content).clone();\n        });\n      }\n\n      $(child)[nameIndex ? 'after' : 'before'](...contents);\n\n      if (!childLength) {\n        element.removeChild(child);\n      }\n    });\n  };\n});\n","import $ from '../$';\nimport each from '../functions/each';\nimport { JQ } from '../JQ';\nimport HTMLString from '../types/HTMLString';\nimport Selector from '../types/Selector';\nimport TypeOrArray from '../types/TypeOrArray';\nimport './insertAfter';\nimport './insertBefore';\nimport './map';\nimport './remove';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 把当前元素追加到指定元素内部的后面\n     * @param target CSS 选择器、HTML 字符串、DOM 元素、DOM 元素数组、或 JQ 对象\n     * @returns 由新插入的元素组成的集合\n     * @example\n```js\n$('<p>Hello</p>').appendTo('<p>I would like to say: </p>')\n// <p>I would like to say: <p>Hello</p></p>\n```\n     */\n    appendTo(target: Selector | HTMLString | TypeOrArray<Element> | JQ): this;\n  }\n}\n\neach(['appendTo', 'prependTo'], (nameIndex, name) => {\n  $.fn[name] = function (this: JQ, target: any): JQ {\n    const extraChilds: HTMLElement[] = [];\n    const $target = $(target).map((_, element: HTMLElement) => {\n      const childNodes = element.childNodes;\n      const childLength = childNodes.length;\n\n      if (childLength) {\n        return childNodes[nameIndex ? 0 : childLength - 1];\n      }\n\n      const child = document.createElement('div');\n      element.appendChild(child);\n      extraChilds.push(child);\n\n      return child;\n    });\n\n    const $result = this[nameIndex ? 'insertBefore' : 'insertAfter']($target);\n\n    $(extraChilds).remove();\n\n    return $result;\n  };\n});\n","import $ from '../$';\nimport each from '../functions/each';\nimport PlainObject from '../interfaces/PlainObject';\nimport { JQ } from '../JQ';\nimport {\n  cssNumber,\n  getStyle,\n  isElement,\n  isFunction,\n  isNull,\n  isNumber,\n  isObjectLike,\n  isUndefined,\n  toCamelCase,\n} from '../utils';\nimport './each';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 设置元素的属性\n     * @param name 属性名\n     * @param value\n     * 属性值，可以为字符串或数值。\n     *\n     * 也可以是一个返回字符串或数值的回调函数。函数的第一个参数为元素的索引位置，第二个参数为旧的属性值，`this` 指向当前元素\n     *\n     * 若属性值或函数返回 `null`，则删除指定属性\n     *\n     * 若属性值或函数返回 `void` 或 `undefined`，则不修改当前属性\n     * @example\n```js\n$('div').attr('title', 'mdui');\n```\n     * @example\n```js\n$('img').attr('src', function() {\n  return '/resources/' + this.title;\n});\n```\n     */\n    attr(\n      name: string,\n      value:\n        | string\n        | number\n        | null\n        | undefined\n        | ((\n            this: T,\n            index: number,\n            oldAttrValue: string,\n          ) => string | number | null | void | undefined),\n    ): this;\n\n    /**\n     * 同时设置多个属性\n     * @param attributes\n     * 键值对数据。键名为属性名，键值为属性值或回调函数。\n     *\n     * 回调函数的第一个参数为元素的索引位置，第二个参数为旧的属性值，`this` 指向当前元素\n     *\n     * 若属性值或函数返回 `null`，则删除指定属性\n     *\n     * 若属性值或函数返回 `void` 或 `undefined`，则不修改对应属性\n     * @example\n```js\n$('img').attr({\n  src: '/resources/hat.gif',\n  title: 'mdui',\n  alt: 'mdui Logo'\n});\n```\n     @example\n```js\n$('img').attr({\n  src: function () {\n    return '/resources/' + this.title;\n  },\n  title: 'mdui',\n  alt: 'mdui Logo'\n});\n```\n     */\n    attr(\n      attributes: PlainObject<\n        | string\n        | number\n        | null\n        | undefined\n        | ((\n            this: T,\n            index: number,\n            oldAttrValue: string,\n          ) => string | number | null | void | undefined)\n      >,\n    ): this;\n\n    /**\n     * 获取集合中第一个元素的属性值\n     * @param name 属性名\n     * @example\n```js\n$('div').attr('title');\n```\n     */\n    attr(name: string): string | undefined;\n  }\n}\n\neach(['attr', 'prop', 'css'], (nameIndex, name) => {\n  function set(element: HTMLElement, key: string, value: any): void {\n    // 值为 undefined 时，不修改\n    if (isUndefined(value)) {\n      return;\n    }\n\n    switch (nameIndex) {\n      // attr\n      case 0:\n        if (isNull(value)) {\n          element.removeAttribute(key);\n        } else {\n          element.setAttribute(key, value);\n        }\n        break;\n\n      // prop\n      case 1:\n        // @ts-ignore\n        element[key] = value;\n        break;\n\n      // css\n      default:\n        key = toCamelCase(key);\n\n        // @ts-ignore\n        element.style[key] = isNumber(value)\n          ? `${value}${cssNumber.indexOf(key) > -1 ? '' : 'px'}`\n          : value;\n        break;\n    }\n  }\n\n  function get(element: HTMLElement, key: string): any {\n    switch (nameIndex) {\n      // attr\n      case 0:\n        // 属性不存在时，原生 getAttribute 方法返回 null，而 jquery 返回 undefined。这里和 jquery 保持一致\n        const value = element.getAttribute(key);\n        return isNull(value) ? undefined : value;\n\n      // prop\n      case 1:\n        // @ts-ignore\n        return element[key];\n\n      // css\n      default:\n        return getStyle(element, key);\n    }\n  }\n\n  $.fn[name] = function (\n    this: JQ,\n    key: string | PlainObject,\n    value?: any,\n  ): any {\n    if (isObjectLike(key)) {\n      each(key, (k, v) => {\n        // @ts-ignore\n        this[name](k, v);\n      });\n\n      return this;\n    }\n\n    if (arguments.length === 1) {\n      const element = this[0];\n\n      return isElement(element) ? get(element, key) : undefined;\n    }\n\n    return this.each((i, element) => {\n      set(\n        element,\n        key,\n        isFunction(value) ? value.call(element, i, get(element, key)) : value,\n      );\n    });\n  };\n});\n","import $ from '../$';\nimport each from '../functions/each';\nimport unique from '../functions/unique';\nimport { JQ } from '../JQ';\nimport Selector from '../types/Selector';\nimport { isElement } from '../utils';\nimport './each';\nimport './is';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 获取当前元素的直接子元素\n     * @param selector CSS 选择器。若指定了该参数，则使用该参数对子元素进行过滤\n     * @example\n```js\n// 找到 #box 的所有直接子元素\n$('#box').children()\n```\n     * @example\n```js\n// 找到 #box 的所有直接子元素中，包含 .box 的元素集合\n$('#box').children('.box')\n```\n     */\n    children(selector?: Selector): this;\n  }\n}\n\n$.fn.children = function (this: JQ, selector?: Selector): JQ {\n  const children: Element[] = [];\n\n  this.each((_, element) => {\n    each(element.childNodes, (__, childNode) => {\n      if (!isElement(childNode)) {\n        return;\n      }\n\n      if (!selector || $(childNode).is(selector)) {\n        children.push(childNode);\n      }\n    });\n  });\n\n  return new JQ(unique(children));\n};\n","import $ from '../$';\nimport { JQ } from '../JQ';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 返回一个当前集合的子集\n     *\n     * 子集为从 start 开始的元素。若指定了 end 参数，则提取从 start 到不包含 end 位置的元素\n     * @param start 从该位置开始\n     * @param end 到该位置结束（不包含该位置）\n     * @example\n```js\n返回集合中第三个（包含第三个）之后的所有元素\n$('div').slice(3);\n```\n     * @example\n```js\n// 返回集合中第三个到第五个（包含第三个，不包含第五个）之间的元素\n$('div').slice(3, 5);\n```\n     */\n    slice(start: number, end?: number): this;\n  }\n}\n\n$.fn.slice = function (this: JQ, ...args: [number, number?]): JQ {\n  return new JQ([].slice.apply(this, args));\n};\n","import $ from '../$';\nimport { JQ } from '../JQ';\nimport './slice';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 返回 JQ 对象中指定索引位置的元素的 JQ 对象\n     * @param index 元素的索引位置\n     * @example\n```js\n// 返回第一个元素的 JQ 对象\n$('div').eq(0);\n```\n     * @example\n```js\n// 返回最后一个元素的 JQ 对象\n$('div').eq(-1);\n```\n     */\n    eq(index: number): this;\n  }\n}\n\n$.fn.eq = function (this: JQ, index: number): JQ {\n  const ret = index === -1 ? this.slice(index) : this.slice(index, +index + 1);\n\n  return new JQ(ret);\n};\n","import $ from '../../$';\nimport unique from '../../functions/unique';\nimport { JQ } from '../../JQ';\nimport { isElement } from '../../utils';\nimport '../each';\nimport '../is';\n\nexport default function dir(\n  $elements: JQ,\n  nameIndex: number,\n  node: 'parentNode' | 'nextElementSibling' | 'previousElementSibling',\n  selector?: any,\n  filter?: string,\n): JQ {\n  const ret: Element[] = [];\n  let target;\n\n  $elements.each((_, element) => {\n    target = element[node];\n\n    // 不能包含最顶层的 document 元素\n    while (target && isElement(target)) {\n      // prevUntil, nextUntil, parentsUntil\n      if (nameIndex === 2) {\n        if (selector && $(target).is(selector)) {\n          break;\n        }\n\n        if (!filter || $(target).is(filter)) {\n          ret.push(target);\n        }\n      }\n\n      // prev, next, parent\n      else if (nameIndex === 0) {\n        if (!selector || $(target).is(selector)) {\n          ret.push(target);\n        }\n\n        break;\n      }\n\n      // prevAll, nextAll, parents\n      else {\n        if (!selector || $(target).is(selector)) {\n          ret.push(target);\n        }\n      }\n\n      // @ts-ignore\n      target = target[node];\n    }\n  });\n\n  return new JQ(unique(ret));\n}\n","import $ from '../$';\nimport each from '../functions/each';\nimport { JQ } from '../JQ';\nimport Selector from '../types/Selector';\nimport './get';\nimport dir from './utils/dir';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 获取当前集合中，所有元素的直接父元素的集合\n     * @param selector CSS 选择器。若指定了该参数，则仅返回与该参数匹配的父元素的集合\n     * @example\n```js\n// 返回 .box 元素的直接父元素的集合\n$('.box').parent()\n```\n     * @example\n```js\n// 返回 .box 元素的直接父元素中含有 .parent 元素的集合\n$('.box').parent('.parent')\n```\n     */\n    parent(selector?: Selector): this;\n  }\n}\n\neach(['', 's', 'sUntil'], (nameIndex, name) => {\n  $.fn[`parent${name}`] = function (\n    this: JQ,\n    selector?: any,\n    filter?: Selector,\n  ): JQ {\n    // parents、parentsUntil 需要把元素的顺序反向处理，以便和 jQuery 的结果一致\n    const $nodes = !nameIndex ? this : $(this.get().reverse());\n\n    return dir($nodes, nameIndex, 'parentNode', selector, filter);\n  };\n});\n","import $ from '../$';\nimport { JQ } from '../JQ';\nimport Selector from '../types/Selector';\nimport './eq';\nimport './is';\nimport './parents';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 从当前元素向上逐级匹配，返回最先匹配到的元素\n     * @param selector CSS 选择器、DOM 元素、或 JQ 对象\n     * @example\n```js\n// 获取 .box 元素的父元素中最近的 .parent 元素\n$('.box').closest('.parent')\n```\n     */\n    closest(selector: Selector | Element | JQ): this;\n  }\n}\n\n$.fn.closest = function (this: JQ, selector: any): JQ {\n  if (this.is(selector)) {\n    return this;\n  }\n\n  const matched: HTMLElement[] = [];\n  this.parents().each((_, element): void | false => {\n    if ($(element).is(selector)) {\n      matched.push(element);\n\n      return false;\n    }\n  });\n\n  return new JQ(matched);\n};\n","import $ from '../$';\nimport data from '../functions/data';\nimport PlainObject from '../interfaces/PlainObject';\nimport { JQ } from '../JQ';\nimport {\n  isObjectLike,\n  isString,\n  isUndefined,\n  toCamelCase,\n  toKebabCase,\n} from '../utils';\nimport './each';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 在当前元素上存储数据\n     *\n     * `value` 为 `undefined` 时，不设置数据，直接返回原对象\n     *\n     * @param key 数据键名\n     * @param value 数据值\n     * @example\n```js\n$('.box').data('type', 'image')\n```\n     */\n    data(key: string, value: any): this;\n\n    /**\n     * 在当前元素上存储数据\n     * @param data 键值对数据\n     * @example\n```js\n$('.box').data({\n  width: 1020,\n  height: 680,\n})\n```\n     */\n    data(data: PlainObject): this;\n\n    /**\n     * 获取在当前元素上存储的数据\n     * @param key 数据键名\n     * @example\n```js\n$('.box').data('height')\n// 680\n```\n     */\n    data(key: string): any;\n\n    /**\n     * 获取在当前元素上存储的所有数据\n     * @example\n```js\n$('.box').data()\n// { 'type': 'image', 'width': 1020, 'height': 680 }\n```\n     */\n    data(): PlainObject;\n  }\n}\n\nconst rbrace = /^(?:{[\\w\\W]*\\}|\\[[\\w\\W]*\\])$/;\n\n// 从 `data-*` 中获取的值，需要经过该函数转换\nfunction getData(value: string): any {\n  if (value === 'true') {\n    return true;\n  }\n\n  if (value === 'false') {\n    return false;\n  }\n\n  if (value === 'null') {\n    return null;\n  }\n\n  if (value === +value + '') {\n    return +value;\n  }\n\n  if (rbrace.test(value)) {\n    return JSON.parse(value);\n  }\n\n  return value;\n}\n\n// 若 value 不存在，则从 `data-*` 中获取值\nfunction dataAttr(element: HTMLElement, key: string, value?: any): any {\n  if (isUndefined(value) && element.nodeType === 1) {\n    const name = 'data-' + toKebabCase(key);\n    value = element.getAttribute(name);\n\n    if (isString(value)) {\n      try {\n        value = getData(value);\n      } catch (e) {}\n    } else {\n      value = undefined;\n    }\n  }\n\n  return value;\n}\n\n$.fn.data = function (this: JQ, key?: string | PlainObject, value?: any): any {\n  // 获取所有值\n  if (isUndefined(key)) {\n    if (!this.length) {\n      return undefined;\n    }\n\n    const element = this[0];\n    const resultData = data(element);\n\n    // window, document 上不存在 `data-*` 属性\n    if (element.nodeType !== 1) {\n      return resultData;\n    }\n\n    // 从 `data-*` 中获取值\n    const attrs = element.attributes;\n    let i = attrs.length;\n    while (i--) {\n      if (attrs[i]) {\n        let name = attrs[i].name;\n        if (name.indexOf('data-') === 0) {\n          name = toCamelCase(name.slice(5));\n          resultData[name] = dataAttr(element, name, resultData[name]);\n        }\n      }\n    }\n\n    return resultData;\n  }\n\n  // 同时设置多个值\n  if (isObjectLike(key)) {\n    return this.each(function () {\n      data(this, key);\n    });\n  }\n\n  // value 传入了 undefined\n  if (arguments.length === 2 && isUndefined(value)) {\n    return this;\n  }\n\n  // 设置值\n  if (!isUndefined(value)) {\n    return this.each(function () {\n      data(this, key as string, value);\n    });\n  }\n\n  // 获取值\n  if (!this.length) {\n    return undefined;\n  }\n\n  return dataAttr(this[0], key, data(this[0], key));\n};\n","import $ from '../$';\nimport { JQ } from '../JQ';\nimport './each';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 移除当前元素中所有的子元素\n     * @example\n```js\n$('.box').empty()\n```\n     */\n    empty(): this;\n  }\n}\n\n$.fn.empty = function (this: JQ): JQ {\n  return this.each(function () {\n    this.innerHTML = '';\n  });\n};\n","import $ from '../$';\nimport each from '../functions/each';\nimport PlainObject from '../interfaces/PlainObject';\nimport { JQ } from '../JQ';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 在 $ 的原型链上扩展方法\n     * @param obj\n     * @example\n```js\n$.fn.extend({\n  customFunc: function () {}\n})\n\n// 然后就可以这样使用扩展的方法了\n$(document).customFunc()\n```\n     */\n    extend(obj: PlainObject): this;\n  }\n}\n\n$.fn.extend = function (this: JQ, obj: PlainObject): JQ {\n  each(obj, (prop, value) => {\n    // 在 JQ 对象上扩展方法时，需要自己添加 typescript 的类型定义\n    $.fn[prop] = value;\n  });\n\n  return this;\n};\n","import $ from '../$';\nimport { JQ } from '../JQ';\nimport Selector from '../types/Selector';\nimport TypeOrArray from '../types/TypeOrArray';\nimport { isFunction, isString } from '../utils';\nimport './is';\nimport './map';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 从当前对象中筛选出与指定表达式匹配的元素\n     * @param selector\n     * 可以是 CSS 表达式、DOM 元素、DOM 元素数组、或回调函数\n     *\n     * 回调函数的第一个参数为元素的索引位置，第二个参数为当前元素，`this` 指向当前元素\n     *\n     * 回调函数返回 `true` 时，对应元素会被保留；返回 `false` 时，对应元素会被移除\n     * @example\n```js\n// 筛选出所有含 .box 的 div 元素\n$('div').filter('.box');\n```\n     * @example\n```js\n// 筛选出所有已选中的元素\n$('#select option').filter(function (idx, element) {\n  return element.selected;\n});\n```\n     */\n    filter(\n      selector:\n        | Selector\n        | TypeOrArray<Element>\n        | JQ\n        | ((this: T, index: number, element: T) => boolean),\n    ): this;\n  }\n}\n\n$.fn.filter = function (this: JQ, selector: any): JQ {\n  if (isFunction(selector)) {\n    return this.map((index, element) =>\n      selector.call(element, index, element) ? element : undefined,\n    );\n  }\n\n  if (isString(selector)) {\n    return this.map((_, element) =>\n      $(element).is(selector) ? element : undefined,\n    );\n  }\n\n  const $selector = $(selector);\n\n  return this.map((_, element) =>\n    $selector.get().indexOf(element) > -1 ? element : undefined,\n  );\n};\n","import $ from '../$';\nimport { JQ } from '../JQ';\nimport './eq';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 返回当前集合中第一个元素的 JQ 对象\n     * @example\n```js\n$('div').first()\n```\n     */\n    first(): this;\n  }\n}\n\n$.fn.first = function (this: JQ): JQ {\n  return this.eq(0);\n};\n","import $ from '../$';\nimport contains from '../functions/contains';\nimport { JQ } from '../JQ';\nimport Selector from '../types/Selector';\nimport { isString } from '../utils';\nimport './find';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 保留含有指定子元素的元素，去掉不含有指定子元素的元素\n     * @param selector CSS 选择器或 DOM 元素\n     * @example\n```js\n// 给含有 ul 的 li 加上背景色\n$('li').has('ul').css('background-color', 'red');\n```\n     */\n    has(selector: Selector | Element): this;\n  }\n}\n\n$.fn.has = function (this: JQ, selector: Selector | Element): JQ {\n  const $targets = isString(selector) ? this.find(selector) : $(selector);\n  const { length } = $targets;\n\n  return this.map(function () {\n    for (let i = 0; i < length; i += 1) {\n      if (contains(this, $targets[i])) {\n        return this;\n      }\n    }\n\n    return;\n  });\n};\n","import $ from '../$';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 是否含有指定的 CSS 类\n     * @param className CSS 类名\n     * @example\n```js\n$('div').hasClass('item')\n```\n     */\n    hasClass(className: string): boolean;\n  }\n}\n\n$.fn.hasClass = function (className: string): boolean {\n  return this[0].classList.contains(className);\n};\n","import $ from '../$';\nimport each from '../functions/each';\nimport { JQ } from '../JQ';\nimport {\n  isBoolean,\n  isDocument,\n  isFunction,\n  isWindow,\n  toElement,\n  isBorderBox,\n  getExtraWidth,\n  getComputedStyleValue,\n  isIE,\n} from '../utils';\nimport './css';\nimport './each';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 设置集合中所有元素的宽度（不包含 `padding`, `border`, `margin` 的宽度）\n     * @param value\n     * 可以是带单位的字符串，或者数值；或者是返回带单位的字符串或数值的回调函数\n     *\n     * 回调函数的第一个参数为元素的索引位置，第二个参数为旧的宽度值，`this` 指向当前元素\n     *\n     * 若该值、或函数返回值是数值，则自动添加 `px` 作为单位\n     *\n     * 若该值、或函数返回值是 `null` 或 `undefined`，则不修改元素的宽度\n     * @example\n```js\n$('.box').width('20%');\n```\n     * @example\n```js\n$('.box').width(10);\n```\n     */\n    width(\n      value:\n        | string\n        | number\n        | null\n        | undefined\n        | ((\n            this: T,\n            index: number,\n            oldValue: number,\n          ) => string | number | null | undefined | void),\n    ): this;\n\n    /**\n     * 获取集合中第一个元素的宽度（像素值），不包含 `padding`, `border`, `margin` 的宽度\n     * @example\n```js\n$('.box').width();\n```\n     */\n    width(): number;\n  }\n}\n\ntype typeName = 'Width' | 'Height';\ntype typeFuncIndex = 0 | 1 | 2;\ntype typeExtra = 'margin' | 'padding' | 'border';\n\n/**\n * 值上面的 padding、border、margin 处理\n * @param element\n * @param name\n * @param value\n * @param funcIndex\n * @param includeMargin\n * @param multiply\n */\nfunction handleExtraWidth(\n  element: HTMLElement,\n  name: typeName,\n  value: number,\n  funcIndex: typeFuncIndex,\n  includeMargin: boolean,\n  multiply: number, // 值乘以多少\n): number {\n  // 获取元素的 padding, border, margin 宽度（两侧宽度的和）\n  const getExtraWidthValue = (extra: typeExtra): number => {\n    return (\n      getExtraWidth(element, name.toLowerCase() as 'width' | 'height', extra) *\n      multiply\n    );\n  };\n\n  if (funcIndex === 2 && includeMargin) {\n    value += getExtraWidthValue('margin');\n  }\n\n  if (isBorderBox(element)) {\n    // IE 为 box-sizing: border-box 时，得到的值不含 border 和 padding，这里先修复\n    // 仅获取时需要处理，multiply === 1 为 get\n    if (isIE() && multiply === 1) {\n      value += getExtraWidthValue('border');\n      value += getExtraWidthValue('padding');\n    }\n\n    if (funcIndex === 0) {\n      value -= getExtraWidthValue('border');\n    }\n\n    if (funcIndex === 1) {\n      value -= getExtraWidthValue('border');\n      value -= getExtraWidthValue('padding');\n    }\n  } else {\n    if (funcIndex === 0) {\n      value += getExtraWidthValue('padding');\n    }\n\n    if (funcIndex === 2) {\n      value += getExtraWidthValue('border');\n      value += getExtraWidthValue('padding');\n    }\n  }\n\n  return value;\n}\n\n/**\n * 获取元素的样式值\n * @param element\n * @param name\n * @param funcIndex 0: innerWidth, innerHeight; 1: width, height; 2: outerWidth, outerHeight\n * @param includeMargin\n */\nfunction get(\n  element: HTMLElement,\n  name: typeName,\n  funcIndex: typeFuncIndex,\n  includeMargin: boolean,\n): number {\n  const clientProp = `client${name}` as 'clientWidth' | 'clientHeight';\n  const scrollProp = `scroll${name}` as 'scrollWidth' | 'scrollHeight';\n  const offsetProp = `offset${name}` as 'offsetWidth' | 'offsetHeight';\n  const innerProp = `inner${name}` as 'innerWidth' | 'innerHeight';\n\n  // $(window).width()\n  if (isWindow(element)) {\n    // outerWidth, outerHeight 需要包含滚动条的宽度\n    return funcIndex === 2\n      ? element[innerProp]\n      : toElement(document)[clientProp];\n  }\n\n  // $(document).width()\n  if (isDocument(element)) {\n    const doc = toElement(element) as HTMLElement;\n\n    return Math.max(\n      // @ts-ignore\n      element.body[scrollProp],\n      doc[scrollProp],\n      // @ts-ignore\n      element.body[offsetProp],\n      doc[offsetProp],\n      doc[clientProp],\n    );\n  }\n\n  const value = parseFloat(\n    getComputedStyleValue(element, name.toLowerCase()) || '0',\n  );\n\n  return handleExtraWidth(element, name, value, funcIndex, includeMargin, 1);\n}\n\n/**\n * 设置元素的样式值\n * @param element\n * @param elementIndex\n * @param name\n * @param funcIndex 0: innerWidth, innerHeight; 1: width, height; 2: outerWidth, outerHeight\n * @param includeMargin\n * @param value\n */\nfunction set(\n  element: HTMLElement,\n  elementIndex: number,\n  name: typeName,\n  funcIndex: typeFuncIndex,\n  includeMargin: boolean,\n  value: string | number,\n): void {\n  let computedValue = isFunction(value)\n    ? value.call(\n        element,\n        elementIndex,\n        get(element, name, funcIndex, includeMargin),\n      )\n    : value;\n\n  if (computedValue == null) {\n    return;\n  }\n\n  const $element = $(element);\n  const dimension = name.toLowerCase();\n\n  // 特殊的值，不需要计算 padding、border、margin\n  if (['auto', 'inherit', ''].indexOf(computedValue) > -1) {\n    $element.css(dimension, computedValue);\n    return;\n  }\n\n  // 其他值保留原始单位。注意：如果不使用 px 作为单位，则算出的值一般是不准确的\n  const suffix = computedValue.toString().replace(/\\b[0-9.]*/, '');\n  const numerical = parseFloat(computedValue);\n\n  computedValue =\n    handleExtraWidth(element, name, numerical, funcIndex, includeMargin, -1) +\n    (suffix || 'px');\n\n  $element.css(dimension, computedValue);\n}\n\neach(['Width', 'Height'], (_, name: typeName) => {\n  each(\n    [`inner${name}`, name.toLowerCase(), `outer${name}`],\n    (funcIndex: typeFuncIndex, funcName) => {\n      $.fn[funcName] = function (\n        this: JQ,\n        margin?: any,\n        value?: any,\n      ): JQ | number | undefined {\n        // 是否是赋值操作\n        const isSet = arguments.length && (funcIndex < 2 || !isBoolean(margin));\n        const includeMargin = margin === true || value === true;\n\n        // 获取第一个元素的值\n        if (!isSet) {\n          return this.length\n            ? get(this[0], name, funcIndex, includeMargin)\n            : undefined;\n        }\n\n        // 设置每个元素的值\n        return this.each((index, element) =>\n          set(element, index, name, funcIndex, includeMargin, margin),\n        );\n      };\n    },\n  );\n});\n","import $ from '../$';\nimport { JQ } from '../JQ';\nimport './each';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 隐藏集合中所有元素\n     * @example\n```js\n$('.box').hide();\n```\n     */\n    hide(): this;\n  }\n}\n\n$.fn.hide = function (this: JQ): JQ {\n  return this.each(function () {\n    this.style.display = 'none';\n  });\n};\n","import $ from '../$';\nimport each from '../functions/each';\nimport map from '../functions/map';\nimport { JQ } from '../JQ';\nimport { isElement, isFunction, isUndefined, toElement } from '../utils';\nimport './each';\nimport './is';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 设置集合中每个元素的值\n     * @param value\n     * 元素的值。可以是字符串、数值、字符串数组、或回调函数\n     *\n     * 回调函数的第一个参数为元素的索引位置，第二个参数为元素旧的值，`this` 指向当前元素\n     *\n     * 若元素为 `<input type=\"checkbox\">`、`<input type=\"radio\">`、`<option>`，则元素值、或函数返回值可以为数组，此时将选中值在数组中的元素，并取消选中值不在数组中的元素\n     *\n     * 若元素值、或函数返回值为 `undefined`，则会将元素值设为空\n     * @example\n```js\n$('#input').val('input value')\n```\n     */\n    val(\n      value:\n        | string\n        | number\n        | string[]\n        | undefined\n        | ((\n            this: T,\n            inDex: number,\n            oldValue: string | number | string[],\n          ) => string | number | string[] | void | undefined),\n    ): this;\n\n    /**\n     * 获取集合中第一个元素的值\n     *\n     * 对于 `<select multiple=\"multiple\">` 元素，将返回一个包含每个选择项的数组\n     * @example\n```js\n$('#input').val()\n```\n     */\n    val(): string | number | string[] | undefined;\n  }\n}\n\neach(['val', 'html', 'text'], (nameIndex, name) => {\n  const props: { [index: number]: string } = {\n    0: 'value',\n    1: 'innerHTML',\n    2: 'textContent',\n  };\n  const propName = props[nameIndex];\n\n  function get($elements: JQ): any {\n    // text() 获取所有元素的文本\n    if (nameIndex === 2) {\n      // @ts-ignore\n      return map($elements, (element) => toElement(element)[propName]).join('');\n    }\n\n    // 空集合时，val() 和 html() 返回 undefined\n    if (!$elements.length) {\n      return undefined;\n    }\n\n    // val() 和 html() 仅获取第一个元素的内容\n    const firstElement = $elements[0];\n\n    // select multiple 返回数组\n    if (nameIndex === 0 && $(firstElement).is('select[multiple]')) {\n      return map(\n        $(firstElement).find('option:checked'),\n        (element) => (element as HTMLOptionElement).value,\n      );\n    }\n\n    // @ts-ignore\n    return firstElement[propName];\n  }\n\n  function set(element: HTMLElement, value: any): void {\n    // text() 和 html() 赋值为 undefined，则保持原内容不变\n    // val() 赋值为 undefined 则赋值为空\n    if (isUndefined(value)) {\n      if (nameIndex !== 0) {\n        return;\n      }\n\n      value = '';\n    }\n\n    if (nameIndex === 1 && isElement(value)) {\n      value = value.outerHTML;\n    }\n\n    // @ts-ignore\n    element[propName] = value;\n  }\n\n  $.fn[name] = function (this: JQ, value?: any): any {\n    // 获取值\n    if (!arguments.length) {\n      return get(this);\n    }\n\n    // 设置值\n    return this.each((i, element) => {\n      const computedValue = isFunction(value)\n        ? value.call(element, i, get($(element)))\n        : value;\n\n      // value 是数组，则选中数组中的元素，反选不在数组中的元素\n      if (nameIndex === 0 && Array.isArray(computedValue)) {\n        // select[multiple]\n        if ($(element).is('select[multiple]')) {\n          map(\n            $(element).find('option'),\n            (option) =>\n              ((option as HTMLOptionElement).selected =\n                computedValue.indexOf((option as HTMLOptionElement).value) >\n                -1),\n          );\n        }\n\n        // 其他 checkbox, radio 等元素\n        else {\n          (element as HTMLInputElement).checked =\n            computedValue.indexOf((element as HTMLInputElement).value) > -1;\n        }\n      } else {\n        set(element, computedValue);\n      }\n    });\n  };\n});\n","import $ from '../$';\nimport { JQ } from '../JQ';\nimport Selector from '../types/Selector';\nimport { isString } from '../utils';\nimport './children';\nimport './eq';\nimport './get';\nimport './parent';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 如果没有传入参数，则返回当前集合中第一个元素相对于同辈元素的索引值。\n     *\n     * 如果传入一个 CSS 选择器作为参数，则返回当前集合中第一个元素相对于 CSS 选择器匹配元素的索引值。\n     *\n     * 如果传入一个 DOM 元素，则返回该 DOM 元素在当前集合中的索引值。\n     *\n     * 如果传入一个 JQ 对象，则返回 JQ 对象中第一个元素在当前集合中的索引值。\n     * @param selector CSS 选择器、DOM 元素、JQ 对象\n     */\n    index(selector?: Selector | Element | JQ): number;\n  }\n}\n\n$.fn.index = function (this: JQ, selector?: any): number {\n  if (!arguments.length) {\n    return this.eq(0).parent().children().get().indexOf(this[0]);\n  }\n\n  if (isString(selector)) {\n    return $(selector).get().indexOf(this[0]);\n  }\n\n  return this.get().indexOf($(selector)[0]);\n};\n","import $ from '../$';\nimport { JQ } from '../JQ';\nimport './eq';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 返回当前集合中最后一个元素的 JQ 对象\n     * @example\n```js\n$('div').last()\n```\n     */\n    last(): this;\n  }\n}\n\n$.fn.last = function (this: JQ): JQ {\n  return this.eq(-1);\n};\n","import $ from '../$';\nimport each from '../functions/each';\nimport { JQ } from '../JQ';\nimport Selector from '../types/Selector';\nimport dir from './utils/dir';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 获取当前集合中每个元素的后一个匹配的同辈元素\n     * @param selector CSS 选择器。指定该参数时，将仅返回和该参数匹配的元素的集合\n     * @example\n```js\n// 获取 .box 元素的后一个元素的集合\n$('.box').next()\n```\n     * @example\n```js\n// 获取 .box 元素的后一个 div 元素的集合\n$('.box').next('div')\n```\n     */\n    next(selector?: Selector): this;\n  }\n}\n\neach(['', 'All', 'Until'], (nameIndex, name) => {\n  $.fn[`next${name}`] = function (\n    this: JQ,\n    selector?: any,\n    filter?: Selector,\n  ): JQ {\n    return dir(this, nameIndex, 'nextElementSibling', selector, filter);\n  };\n});\n","import $ from '../$';\nimport { JQ } from '../JQ';\nimport Selector from '../types/Selector';\nimport TypeOrArray from '../types/TypeOrArray';\nimport './filter';\nimport './map';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 从当前集合中筛选出与表达式不匹配的元素\n     * @param selection\n     * 可以是 CSS 选择器、DOM 元素、DOM 元素数组、JQ 对象、或返回 `boolean` 值的回调函数\n     *\n     * 回调函数的第一个参数为元素的索引位置，第二个参数为当前元素，`this` 指向当前元素\n     *\n     * 回调函数返回 `true` 时，将移除对应元素；返回 `false` 时，将保留对应元素\n     * @example\n```js\n// 筛选出所有不含 .box 类的 div 元素\n$('div').not('.box')\n```\n     * @example\n```js\n// 筛选出所有未选中的元素\n$('#select option').not(function (idx, element) {\n  return element.selected;\n})\n```\n     */\n    not(\n      selection:\n        | Selector\n        | TypeOrArray<Element>\n        | JQ\n        | ((this: T, index: number, element: T) => boolean),\n    ): this;\n  }\n}\n\n$.fn.not = function (this: JQ, selector: any): JQ {\n  const $excludes = this.filter(selector);\n\n  return this.map((_, element) =>\n    $excludes.index(element) > -1 ? undefined : element,\n  );\n};\n","import $ from '../$';\nimport { JQ } from '../JQ';\nimport './css';\nimport './map';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 返回最近的用于定位的父元素\n     *\n     * 即父元素中第一个 `position` 为 `relative`, `absolute` 或 `fixed` 的元素\n     * @example\n```js\n$('.box').offsetParent()\n```\n     */\n    offsetParent(): this;\n  }\n}\n\n/**\n * 返回最近的用于定位的父元素\n */\n$.fn.offsetParent = function (this: JQ): JQ {\n  return this.map(function () {\n    let offsetParent = this.offsetParent as HTMLElement;\n\n    while (offsetParent && $(offsetParent).css('position') === 'static') {\n      offsetParent = offsetParent.offsetParent as HTMLElement;\n    }\n\n    return offsetParent || document.documentElement;\n  });\n};\n","import $ from '../$';\nimport { JQ } from '../JQ';\nimport './css';\nimport './eq';\nimport './offset';\nimport './offsetParent';\n\ninterface Coordinates {\n  left: number;\n  top: number;\n}\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 获取集合中第一个元素相对于父元素的偏移\n     * @example\n```js\n$('.box').position();\n// { top: 20, left: 30 }\n```\n     */\n    position(): Coordinates;\n  }\n}\n\nfunction floatStyle($element: JQ, name: string): number {\n  return parseFloat($element.css(name));\n}\n\n$.fn.position = function (this: JQ): Coordinates | undefined {\n  if (!this.length) {\n    return undefined;\n  }\n\n  const $element = this.eq(0);\n\n  let currentOffset: Coordinates;\n  let parentOffset: Coordinates = {\n    left: 0,\n    top: 0,\n  };\n\n  if ($element.css('position') === 'fixed') {\n    currentOffset = $element[0].getBoundingClientRect();\n  } else {\n    currentOffset = $element.offset();\n\n    const $offsetParent = $element.offsetParent();\n    parentOffset = $offsetParent.offset();\n    parentOffset.top += floatStyle($offsetParent, 'border-top-width');\n    parentOffset.left += floatStyle($offsetParent, 'border-left-width');\n  }\n\n  return {\n    top:\n      currentOffset.top - parentOffset.top - floatStyle($element, 'margin-top'),\n    left:\n      currentOffset.left -\n      parentOffset.left -\n      floatStyle($element, 'margin-left'),\n  };\n};\n","import $ from '../$';\nimport extend from '../functions/extend';\nimport { JQ } from '../JQ';\nimport { isFunction } from '../utils';\nimport './css';\nimport './each';\nimport './position';\n\n/**\n * 获取坐标的返回值，left 和 top 都存在\n */\ninterface CoordinatesValue {\n  left: number;\n  top: number;\n}\n\n/**\n * 设置坐标时，left 和 top 都是可选的\n */\ninterface CoordinatesParam {\n  left?: number;\n  top?: number;\n}\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 设置集合中所有元素相对于 `document` 的坐标\n     * @param value\n     * 包含 `top` 和 `left` 属性的对象；或返回此对象的回调函数。\n     *\n     * 回调函数的第一个参数为元素的索引位置，第二个参数为元素的当前坐标，`this`指向当前元素\n     *\n     * `top`, `left` 的值为 `undefined` 时，不修改对应的值。\n     * @example\n```js\n$('.box').offset({ top: 20, left: 30 });\n```\n     * @example\n```js\n$('.box').offset(function () {\n  return { top: 20, left: 30 };\n});\n```\n     */\n    offset(\n      value:\n        | CoordinatesParam\n        | ((\n            this: T,\n            index: number,\n            oldOffset: CoordinatesValue,\n          ) => CoordinatesParam),\n    ): this;\n\n    /**\n     * 获取当前集合中第一个元素相对于 `document` 的坐标\n     * @example\n```js\n$('.box').offset();\n// { top: 20, left: 30 }\n```\n     */\n    offset(): CoordinatesValue;\n  }\n}\n\nfunction get(element: Element): CoordinatesValue {\n  if (!element.getClientRects().length) {\n    return { top: 0, left: 0 };\n  }\n\n  const rect = element.getBoundingClientRect();\n  const win = (element.ownerDocument as Document).defaultView as Window;\n\n  return {\n    top: rect.top + win.pageYOffset,\n    left: rect.left + win.pageXOffset,\n  };\n}\n\nfunction set(element: Element, value: CoordinatesParam, index: number): void {\n  const $element = $(element);\n  const position = $element.css('position');\n\n  if (position === 'static') {\n    $element.css('position', 'relative');\n  }\n\n  const currentOffset = get(element);\n  const currentTopString = $element.css('top');\n  const currentLeftString = $element.css('left');\n  let currentTop: number;\n  let currentLeft: number;\n\n  const calculatePosition =\n    (position === 'absolute' || position === 'fixed') &&\n    (currentTopString + currentLeftString).indexOf('auto') > -1;\n\n  if (calculatePosition) {\n    const currentPosition = $element.position();\n    currentTop = currentPosition.top;\n    currentLeft = currentPosition.left;\n  } else {\n    currentTop = parseFloat(currentTopString);\n    currentLeft = parseFloat(currentLeftString);\n  }\n\n  const computedValue = isFunction(value)\n    ? value.call(element, index, extend({}, currentOffset))\n    : value;\n\n  $element.css({\n    top:\n      computedValue.top != null\n        ? computedValue.top - currentOffset.top + currentTop\n        : undefined,\n    left:\n      computedValue.left != null\n        ? computedValue.left - currentOffset.left + currentLeft\n        : undefined,\n  });\n}\n\n$.fn.offset = function (this: JQ, value?: any): any {\n  // 获取坐标\n  if (!arguments.length) {\n    if (!this.length) {\n      return undefined;\n    }\n\n    return get(this[0]);\n  }\n\n  // 设置坐标\n  return this.each(function (index) {\n    set(this, value, index);\n  });\n};\n","import $ from '../$';\nimport PlainObject from '../interfaces/PlainObject';\nimport { JQ } from '../JQ';\nimport './on';\nimport { EventCallback } from './utils/event';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 通过事件委托同时添加多个事件处理函数，触发一次后自动解绑\n     * @param events\n     * 一个对象：\n     *\n     * 键名为事件名，多个事件名用空格分隔，可包含命名空间；\n     *\n     * 键值为事件处理函数\n     * @param selector CSS 选择器\n     * @param data\n     * 事件触发时，传递给事件处理函数的数据\n     *\n     * 如果 `data` 是 `string` 类型，则必须提供 `selector` 参数；`selector` 参数可以是 `null`\n     */\n    one(\n      events: PlainObject<EventCallback | false>,\n      selector: string | null | undefined,\n      data?: any,\n    ): this;\n\n    /**\n     * 同时添加多个事件处理函数，触发一次后自动解绑\n     * @param events\n     * 一个对象：\n     *\n     * 键名为事件名，多个事件名用空格分隔，可包含命名空间；\n     *\n     * 键值为事件处理函数\n     * @param data\n     * 事件触发时，传递给事件处理函数的数据\n     *\n     * 如果 `data` 是 `string` 类型，则必须提供 `selector` 参数；`selector` 参数可以是 `null`\n     */\n    one(events: PlainObject<EventCallback | false>, data?: any): this;\n\n    /**\n     * 通过事件委托添加事件处理函数，并传入参数，触发一次后自动解绑\n     * @param eventName\n     * 事件名称，多个事件名可以用空格分隔\n     *\n     * 事件名中可以包含命名空间，如 `click.myPlugin`\n     * @param selector CSS 选择器\n     * @param data\n     * 事件触发时，传递给事件处理函数的数据\n     *\n     * 如果 `data` 是 `string` 类型，则必须提供 `selector` 参数；`selector` 参数可以是 `null`\n     * @param callback 事件处理函数\n     */\n    one(\n      eventName: string,\n      selector: string | null | undefined,\n      data: any,\n      callback: EventCallback | false,\n    ): this;\n\n    /**\n     * 通过事件委托添加事件处理函数，触发一次后自动解绑\n     * @param eventName\n     * 事件名称，多个事件名可以用空格分隔\n     *\n     * 事件名中可以包含命名空间，如 `click.myPlugin`\n     * @param selector CSS 选择器\n     * @param callback 事件处理函数\n     */\n    one(\n      eventName: string,\n      selector: string,\n      callback: EventCallback | false,\n    ): this;\n\n    /**\n     * 添加事件处理函数，并传入参数，触发一次后自动解绑\n     * @param eventName\n     * 事件名称，多个事件名可以用空格分隔\n     *\n     * 事件名中可以包含命名空间，如 `click.myPlugin`\n     * @param data 事件触发时，传递给事件处理函数的数据\n     * @param callback 事件处理函数\n     */\n    one(eventName: string, data: any, callback: EventCallback | false): this;\n\n    /**\n     * 添加事件处理函数，触发一次后自动解绑\n     * @param eventName\n     * 事件名称，多个事件名可以用空格分隔\n     *\n     * 事件名中可以包含命名空间，如 `click.myPlugin`\n     * @param callback 事件处理函数\n     */\n    one(eventName: string, callback: EventCallback | false): this;\n  }\n}\n\n$.fn.one = function (\n  this: JQ,\n  types: PlainObject<EventCallback | false> | string,\n  selector?: any,\n  data?: any,\n  callback?: any,\n): JQ {\n  // @ts-ignore\n  return this.on(types, selector, data, callback, true);\n};\n","import $ from '../$';\nimport each from '../functions/each';\nimport { JQ } from '../JQ';\nimport Selector from '../types/Selector';\nimport './get';\nimport dir from './utils/dir';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 获取当前集合中每个元素的前一个匹配的同辈元素\n     * @param selector CSS 选择器。指定该参数时，将仅返回和该参数匹配的元素的集合\n     * @example\n```js\n// 获取 .box 元素的前一个元素的集合\n$('.box').prev()\n```\n     * @example\n```js\n// 获取 .box 元素的前一个 div 元素的集合\n$('.box').prev('div')\n```\n     */\n    prev(selector?: Selector): this;\n  }\n}\n\neach(['', 'All', 'Until'], (nameIndex, name) => {\n  $.fn[`prev${name}`] = function (\n    this: JQ,\n    selector?: any,\n    filter?: Selector,\n  ): JQ {\n    // prevAll、prevUntil 需要把元素的顺序倒序处理，以便和 jQuery 的结果一致\n    const $nodes = !nameIndex ? this : $(this.get().reverse());\n\n    return dir($nodes, nameIndex, 'previousElementSibling', selector, filter);\n  };\n});\n","import $ from '../$';\nimport each from '../functions/each';\nimport { JQ } from '../JQ';\nimport './each';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 移除集合中每个元素上的指定属性\n     * @param attributeName 属性名，多个属性名可以用空格分隔\n     * @example\n```js\n// 移除一个属性\n$('div').removeAttr('title')\n```\n     * @example\n```js\n// 移除多个属性\n$('div').removeAttr('title label');\n```\n     */\n    removeAttr(attributeName: string): this;\n  }\n}\n\n$.fn.removeAttr = function (this: JQ, attributeName: string): JQ {\n  const names = attributeName.split(' ').filter((name) => name);\n\n  return this.each(function () {\n    each(names, (_, name) => {\n      this.removeAttribute(name);\n    });\n  });\n};\n","import $ from '../$';\nimport removeData from '../functions/removeData';\nimport { JQ } from '../JQ';\nimport TypeOrArray from '../types/TypeOrArray';\nimport './each';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 移除元素上存储的数据\n     *\n     * 该方法只会删除通过 `.data()` 方法设置的数据，不会删除 `data-*` 属性上的数据\n     * @param name\n     * 数据键名\n     *\n     * 若未指定键名，则将移除元素上所有数据\n     *\n     * 多个键名可以用空格分隔，或者用数组表示多个键名\n     * @example\n```js\n// 移除指定键名的数据\n$('.box').removeData('key');\n```\n     * @example\n```js\n// 移除键名为 key1 和 key2 的数据\n$('.box').removeData('key1 key2');\n```\n     * @example\n```js\n// 移除键名为 key1 和 key2 的数据\n$('.box').removeData(['key1', 'key2']);\n```\n     * @example\n```js\n// 移除元素上所有数据\n$('.box').removeData();\n```\n     */\n    removeData(name?: TypeOrArray<string>): this;\n  }\n}\n\n$.fn.removeData = function (this: JQ, name?: TypeOrArray<string>): JQ {\n  return this.each(function () {\n    removeData(this, name);\n  });\n};\n","import $ from '../$';\nimport { JQ } from '../JQ';\nimport './each';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 删除集合中每个元素上的指定属性\n     * @param name 属性名\n     * @example\n```js\n$('input').removeProp('disabled')\n```\n     */\n    removeProp(name: string): this;\n  }\n}\n\n$.fn.removeProp = function (this: JQ, name: string): JQ {\n  return this.each(function () {\n    try {\n      // @ts-ignore\n      delete this[name];\n    } catch (e) {}\n  });\n};\n","import $ from '../$';\nimport { JQ } from '../JQ';\nimport HTMLString from '../types/HTMLString';\nimport TypeOrArray from '../types/TypeOrArray';\nimport './before';\nimport './clone';\nimport './each';\nimport './remove';\nimport { isFunction, isString } from '../utils';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 用指定元素替换当前集合中的元素\n     * @param newContent\n     * 可以是 HTML 字符串、DOM 元素、DOM 元素数组、JQ 对象、或回调函数\n     *\n     * 回调函数的第一个参数为元素的索引位置，第二个参数为当前元素 HTML 字符串，`this` 指向当前元素\n     * @returns 被替换掉的元素集\n     * @example\n```js\n$('.box').replaceWith('<p>Hello</p>')\n```\n     * @example\n```js\n$('.box').replaceWith(function (index, html) {\n  return html + index;\n})\n```\n     */\n    replaceWith(\n      newContent:\n        | HTMLString\n        | TypeOrArray<Element>\n        | JQ\n        | ((\n            this: T,\n            index: number,\n            oldHtml: string,\n          ) => HTMLString | TypeOrArray<Element> | JQ),\n    ): this;\n  }\n}\n\n$.fn.replaceWith = function (this: JQ, newContent: any): JQ {\n  this.each((index, element) => {\n    let content = newContent;\n\n    if (isFunction(content)) {\n      content = content.call(element, index, element.innerHTML);\n    } else if (index && !isString(content)) {\n      content = $(content).clone();\n    }\n\n    $(element).before(content);\n  });\n\n  return this.remove();\n};\n","import $ from '../$';\nimport { JQ } from '../JQ';\nimport Selector from '../types/Selector';\nimport TypeOrArray from '../types/TypeOrArray';\nimport './clone';\nimport './get';\nimport './map';\nimport './replaceWith';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 用当前集合中的元素替换指定元素\n     * @param target 被替换的元素。可以是 CSS 选择器、DOM 元素、DOM 元素数组、或 JQ 对象\n     * @returns 用于替换的元素的集合\n     * @example\n```js\n// 用 .new 元素替换所有 .box 元素\n$('.new').replaceAll('.box');\n```\n     */\n    replaceAll(target: Selector | TypeOrArray<Element> | JQ): this;\n  }\n}\n\n$.fn.replaceAll = function (this: JQ, target: any): JQ {\n  return $(target).map((index, element) => {\n    $(element).replaceWith(index ? this.clone() : this);\n\n    return this.get();\n  });\n};\n","import $ from '../$';\nimport { JQ } from '../JQ';\nimport './each';\nimport './val';\n\ninterface NameValuePair {\n  name: string;\n  value: any;\n}\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 把表单元素的值组合成由 `name` 和 `value` 的键值对组成的数组\n     *\n     * 该方法可对单独表单元素进行操作，也可以对整个 `<form>` 表单进行操作\n     * @example\n```js\n$('form').serializeArray()\n// [ {\"name\":\"name\",\"value\":\"mdui\"}, {\"name\":\"password\",\"value\":\"123456\"} ]\n```\n     */\n    serializeArray(): NameValuePair[];\n  }\n}\n\n/**\n * 将表单元素的值组合成键值对数组\n * @returns {Array}\n */\n$.fn.serializeArray = function (this: JQ): NameValuePair[] {\n  const result: NameValuePair[] = [];\n\n  this.each((_, element) => {\n    const elements =\n      element instanceof HTMLFormElement ? element.elements : [element];\n\n    $(elements).each((_, element) => {\n      const $element = $(element);\n      const type = (element as HTMLInputElement).type;\n      const nodeName = element.nodeName.toLowerCase();\n\n      if (\n        nodeName !== 'fieldset' &&\n        (element as HTMLInputElement).name &&\n        !(element as HTMLInputElement).disabled &&\n        ['input', 'select', 'textarea', 'keygen'].indexOf(nodeName) > -1 &&\n        ['submit', 'button', 'image', 'reset', 'file'].indexOf(type) === -1 &&\n        (['radio', 'checkbox'].indexOf(type) === -1 ||\n          (element as HTMLInputElement).checked)\n      ) {\n        const value = $element.val();\n        const valueArr = Array.isArray(value) ? value : [value];\n\n        valueArr.forEach((value) => {\n          result.push({\n            name: (element as HTMLInputElement).name,\n            value,\n          });\n        });\n      }\n    });\n  });\n\n  return result;\n};\n","import $ from '../$';\nimport param from '../functions/param';\nimport { JQ } from '../JQ';\nimport './serializeArray';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 把表单元素的值编译为字符串\n     * @example\n```js\n$('form').serialize();\n// golang=456&name=mdui&password=\n```\n     */\n    serialize(): string;\n  }\n}\n\n$.fn.serialize = function (this: JQ): string {\n  return param(this.serializeArray());\n};\n","import $ from '../$';\nimport { JQ } from '../JQ';\nimport { getStyle } from '../utils';\nimport './each';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 显示集合中的所有元素\n     * @example\n```js\n$('.box').show()\n```\n     */\n    show(): this;\n  }\n}\n\nconst elementDisplay: {\n  [nodeName: string]: string;\n} = {};\n\n/**\n * 获取元素的初始 display 值，用于 .show() 方法\n * @param nodeName\n */\nfunction defaultDisplay(nodeName: string): string {\n  let element: HTMLElement;\n  let display: string;\n\n  if (!elementDisplay[nodeName]) {\n    element = document.createElement(nodeName);\n    document.body.appendChild(element);\n    display = getStyle(element, 'display');\n    element.parentNode!.removeChild(element);\n    if (display === 'none') {\n      display = 'block';\n    }\n\n    elementDisplay[nodeName] = display;\n  }\n\n  return elementDisplay[nodeName];\n}\n\n/**\n * 显示指定元素\n * @returns {JQ}\n */\n$.fn.show = function (this: JQ): JQ {\n  return this.each(function () {\n    if (this.style.display === 'none') {\n      this.style.display = '';\n    }\n\n    if (getStyle(this, 'display') === 'none') {\n      this.style.display = defaultDisplay(this.nodeName);\n    }\n  });\n};\n","import $ from '../$';\nimport { JQ } from '../JQ';\nimport Selector from '../types/Selector';\nimport './add';\nimport './nextAll';\nimport './prevAll';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 获取当前集合中，每个元素的兄弟元素\n     * @param selector CSS 选择器。若指定了该参数，则只返回和该参数匹配的兄弟元素\n     * @example\n```js\n// 获取 .box 元素的所有兄弟元素\n$('.box').siblings()\n```\n     * @example\n```js\n// 获取 .box 元素的所有兄弟元素中含 .selected 的元素\n$('.box').siblings('.selected')\n```\n     */\n    siblings(selector?: Selector): this;\n  }\n}\n\n/**\n * 取得同辈元素的集合\n * @param selector {String=}\n * @returns {JQ}\n */\n$.fn.siblings = function (this: JQ, selector?: Selector): JQ {\n  return this.prevAll(selector).add(this.nextAll(selector));\n};\n","import $ from '../$';\nimport { JQ } from '../JQ';\nimport { getStyle } from '../utils';\nimport './each';\nimport './hide';\nimport './show';\n\ndeclare module '../JQ' {\n  interface JQ<T = HTMLElement> {\n    /**\n     * 切换集合中所有元素的显示状态\n     * @example\n```js\n$('.box').toggle()\n```\n     */\n    toggle(): this;\n  }\n}\n\n/**\n * 切换元素的显示状态\n */\n$.fn.toggle = function (this: JQ): JQ {\n  return this.each(function () {\n    getStyle(this, 'display') === 'none' ? $(this).show() : $(this).hide();\n  });\n};\n"],"names":["get","set"],"mappings":"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"}